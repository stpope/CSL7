# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSL6
else:
    import _CSL6

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _CSL6.SWIG_PyInstanceMethod_New
_swig_new_static_method = _CSL6.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_SwigPyIterator
    value = _swig_new_instance_method(_CSL6.SwigPyIterator_value)
    incr = _swig_new_instance_method(_CSL6.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_CSL6.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_CSL6.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_CSL6.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_CSL6.SwigPyIterator_copy)
    next = _swig_new_instance_method(_CSL6.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_CSL6.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_CSL6.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_CSL6.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_CSL6.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_CSL6.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_CSL6.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_CSL6.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_CSL6.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_CSL6.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSL6:
_CSL6.SwigPyIterator_swigregister(SwigPyIterator)

CSL_mFrameRate = _CSL6.CSL_mFrameRate
CSL_mBlockSize = _CSL6.CSL_mBlockSize
CSL_mMaxBufferFrames = _CSL6.CSL_mMaxBufferFrames
CSL_mSndFileFrames = _CSL6.CSL_mSndFileFrames
CSL_mMaxSndFileFrames = _CSL6.CSL_mMaxSndFileFrames
CSL_mVerbosity = _CSL6.CSL_mVerbosity
CSL_mLoggingPeriod = _CSL6.CSL_mLoggingPeriod
CSL_LOG_PREFIX = _CSL6.CSL_LOG_PREFIX
CSL_mOutPort = _CSL6.CSL_mOutPort
CSL_mOSCPort = _CSL6.CSL_mOSCPort
CSL_WORD_LEN = _CSL6.CSL_WORD_LEN
CSL_DEF_LEN = _CSL6.CSL_DEF_LEN
CSL_NAME_LEN = _CSL6.CSL_NAME_LEN
CSL_LINE_LEN = _CSL6.CSL_LINE_LEN
CSL_STR_LEN = _CSL6.CSL_STR_LEN
SAMPS_TO_WRITE = _CSL6.SAMPS_TO_WRITE
OUT_SFILE_NAME = _CSL6.OUT_SFILE_NAME
CSL_DATA_DIR = _CSL6.CSL_DATA_DIR
CSL_INIT_FILE = _CSL6.CSL_INIT_FILE
DEFAULT_MIDI_IN = _CSL6.DEFAULT_MIDI_IN
DEFAULT_MIDI_OUT = _CSL6.DEFAULT_MIDI_OUT
class testStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_CSL6.testStruct_name_get, _CSL6.testStruct_name_set)
    fcn = property(_CSL6.testStruct_fcn_get, _CSL6.testStruct_fcn_set)
    comment = property(_CSL6.testStruct_comment_get, _CSL6.testStruct_comment_set)

    def __init__(self):
        _CSL6.testStruct_swiginit(self, _CSL6.new_testStruct())
    __swig_destroy__ = _CSL6.delete_testStruct

# Register testStruct in _CSL6:
_CSL6.testStruct_swigregister(testStruct)

CSL_SCALE = _CSL6.CSL_SCALE
CSL_OFFSET = _CSL6.CSL_OFFSET
CSL_INPUT = _CSL6.CSL_INPUT
CSL_OPERAND = _CSL6.CSL_OPERAND
CSL_OPERAND2 = _CSL6.CSL_OPERAND2
CSL_FREQUENCY = _CSL6.CSL_FREQUENCY
CSL_POSITION = _CSL6.CSL_POSITION
CSL_POSITIONX = _CSL6.CSL_POSITIONX
CSL_POSITIONY = _CSL6.CSL_POSITIONY
CSL_POSITIONZ = _CSL6.CSL_POSITIONZ
CSL_FILTER_FREQUENCY = _CSL6.CSL_FILTER_FREQUENCY
CSL_FILTER_AMOUNT = _CSL6.CSL_FILTER_AMOUNT
CSL_RATE = _CSL6.CSL_RATE
TRUE = _CSL6.TRUE
FALSE = _CSL6.FALSE
CSL_PI = _CSL6.CSL_PI
CSL_TWOPI = _CSL6.CSL_TWOPI
CSL_PIHALF = _CSL6.CSL_PIHALF
CSL_SQRT_TWO = _CSL6.CSL_SQRT_TWO
CSL_SPEED_OF_SOUND = _CSL6.CSL_SPEED_OF_SOUND
CSL_EXP_PER_DB = _CSL6.CSL_EXP_PER_DB
CSL_SAMPS_PER_METER = _CSL6.CSL_SAMPS_PER_METER
CSL_DEGS_PER_RAD = _CSL6.CSL_DEGS_PER_RAD
M_PI = _CSL6.M_PI
kOk = _CSL6.kOk
kFound = _CSL6.kFound
kNotFound = _CSL6.kNotFound
kEmpty = _CSL6.kEmpty
kErr = _CSL6.kErr
class CException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mMessage = property(_CSL6.CException_mMessage_get, _CSL6.CException_mMessage_set)

    def __init__(self, msg):
        _CSL6.CException_swiginit(self, _CSL6.new_CException(msg))
    __swig_destroy__ = _CSL6.delete_CException
    what = _swig_new_instance_method(_CSL6.CException_what)

# Register CException in _CSL6:
_CSL6.CException_swigregister(CException)

class MemoryError(CException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.MemoryError_swiginit(self, _CSL6.new_MemoryError(msg))
    __swig_destroy__ = _CSL6.delete_MemoryError

# Register MemoryError in _CSL6:
_CSL6.MemoryError_swigregister(MemoryError)

class ValueError(CException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.ValueError_swiginit(self, _CSL6.new_ValueError(msg))
    __swig_destroy__ = _CSL6.delete_ValueError

# Register ValueError in _CSL6:
_CSL6.ValueError_swigregister(ValueError)

class TimingError(CException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.TimingError_swiginit(self, _CSL6.new_TimingError(msg))
    __swig_destroy__ = _CSL6.delete_TimingError

# Register TimingError in _CSL6:
_CSL6.TimingError_swigregister(TimingError)

class RunTimeError(CException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.RunTimeError_swiginit(self, _CSL6.new_RunTimeError(msg))
    __swig_destroy__ = _CSL6.delete_RunTimeError

# Register RunTimeError in _CSL6:
_CSL6.RunTimeError_swigregister(RunTimeError)

class LogicError(CException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.LogicError_swiginit(self, _CSL6.new_LogicError(msg))
    __swig_destroy__ = _CSL6.delete_LogicError

# Register LogicError in _CSL6:
_CSL6.LogicError_swigregister(LogicError)

class DomainError(ValueError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.DomainError_swiginit(self, _CSL6.new_DomainError(msg))
    __swig_destroy__ = _CSL6.delete_DomainError

# Register DomainError in _CSL6:
_CSL6.DomainError_swigregister(DomainError)

class OutOfRangeError(ValueError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.OutOfRangeError_swiginit(self, _CSL6.new_OutOfRangeError(msg))
    __swig_destroy__ = _CSL6.delete_OutOfRangeError

# Register OutOfRangeError in _CSL6:
_CSL6.OutOfRangeError_swigregister(OutOfRangeError)

class IOError(ValueError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.IOError_swiginit(self, _CSL6.new_IOError(msg))
    __swig_destroy__ = _CSL6.delete_IOError

# Register IOError in _CSL6:
_CSL6.IOError_swigregister(IOError)

class DBError(LogicError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.DBError_swiginit(self, _CSL6.new_DBError(msg))
    __swig_destroy__ = _CSL6.delete_DBError

# Register DBError in _CSL6:
_CSL6.DBError_swigregister(DBError)

class ProcessingError(ValueError):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        _CSL6.ProcessingError_swiginit(self, _CSL6.new_ProcessingError(msg))
    __swig_destroy__ = _CSL6.delete_ProcessingError

# Register ProcessingError in _CSL6:
_CSL6.ProcessingError_swigregister(ProcessingError)

class CGestalt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameRate = _swig_new_static_method(_CSL6.CGestalt_frameRate)
    frameRateF = _swig_new_static_method(_CSL6.CGestalt_frameRateF)
    setFrameRate = _swig_new_static_method(_CSL6.CGestalt_setFrameRate)
    framePeriod = _swig_new_static_method(_CSL6.CGestalt_framePeriod)
    numInChannels = _swig_new_static_method(_CSL6.CGestalt_numInChannels)
    setNumInChannels = _swig_new_static_method(_CSL6.CGestalt_setNumInChannels)
    numOutChannels = _swig_new_static_method(_CSL6.CGestalt_numOutChannels)
    setNumOutChannels = _swig_new_static_method(_CSL6.CGestalt_setNumOutChannels)
    blockSize = _swig_new_static_method(_CSL6.CGestalt_blockSize)
    setBlockSize = _swig_new_static_method(_CSL6.CGestalt_setBlockSize)
    maxBufferFrames = _swig_new_static_method(_CSL6.CGestalt_maxBufferFrames)
    setMaxBufferFrames = _swig_new_static_method(_CSL6.CGestalt_setMaxBufferFrames)
    maxSndFileFrames = _swig_new_static_method(_CSL6.CGestalt_maxSndFileFrames)
    setMaxSndFileFrames = _swig_new_static_method(_CSL6.CGestalt_setMaxSndFileFrames)
    sndFileFrames = _swig_new_static_method(_CSL6.CGestalt_sndFileFrames)
    setSndFileFrames = _swig_new_static_method(_CSL6.CGestalt_setSndFileFrames)
    verbosity = _swig_new_static_method(_CSL6.CGestalt_verbosity)
    setVerbosity = _swig_new_static_method(_CSL6.CGestalt_setVerbosity)
    loggingPeriod = _swig_new_static_method(_CSL6.CGestalt_loggingPeriod)
    setLoggingPeriod = _swig_new_static_method(_CSL6.CGestalt_setLoggingPeriod)
    outPort = _swig_new_static_method(_CSL6.CGestalt_outPort)
    setOutPort = _swig_new_static_method(_CSL6.CGestalt_setOutPort)
    dataFolder = _swig_new_static_method(_CSL6.CGestalt_dataFolder)
    setDataFolder = _swig_new_static_method(_CSL6.CGestalt_setDataFolder)
    stopNow = _swig_new_static_method(_CSL6.CGestalt_stopNow)
    setStopNow = _swig_new_static_method(_CSL6.CGestalt_setStopNow)
    clearStopNow = _swig_new_static_method(_CSL6.CGestalt_clearStopNow)
    initFileText = _swig_new_static_method(_CSL6.CGestalt_initFileText)
    storeToInitFile = _swig_new_static_method(_CSL6.CGestalt_storeToInitFile)
    sndFileName = _swig_new_static_method(_CSL6.CGestalt_sndFileName)
    screenWidth = _swig_new_static_method(_CSL6.CGestalt_screenWidth)
    setScreenWidth = _swig_new_static_method(_CSL6.CGestalt_setScreenWidth)
    screenHeight = _swig_new_static_method(_CSL6.CGestalt_screenHeight)
    setScreenHeight = _swig_new_static_method(_CSL6.CGestalt_setScreenHeight)

    def __init__(self):
        _CSL6.CGestalt_swiginit(self, _CSL6.new_CGestalt())
    __swig_destroy__ = _CSL6.delete_CGestalt

# Register CGestalt in _CSL6:
_CSL6.CGestalt_swigregister(CGestalt)
CGestalt_frameRate = _CSL6.CGestalt_frameRate
CGestalt_frameRateF = _CSL6.CGestalt_frameRateF
CGestalt_setFrameRate = _CSL6.CGestalt_setFrameRate
CGestalt_framePeriod = _CSL6.CGestalt_framePeriod
CGestalt_numInChannels = _CSL6.CGestalt_numInChannels
CGestalt_setNumInChannels = _CSL6.CGestalt_setNumInChannels
CGestalt_numOutChannels = _CSL6.CGestalt_numOutChannels
CGestalt_setNumOutChannels = _CSL6.CGestalt_setNumOutChannels
CGestalt_blockSize = _CSL6.CGestalt_blockSize
CGestalt_setBlockSize = _CSL6.CGestalt_setBlockSize
CGestalt_maxBufferFrames = _CSL6.CGestalt_maxBufferFrames
CGestalt_setMaxBufferFrames = _CSL6.CGestalt_setMaxBufferFrames
CGestalt_maxSndFileFrames = _CSL6.CGestalt_maxSndFileFrames
CGestalt_setMaxSndFileFrames = _CSL6.CGestalt_setMaxSndFileFrames
CGestalt_sndFileFrames = _CSL6.CGestalt_sndFileFrames
CGestalt_setSndFileFrames = _CSL6.CGestalt_setSndFileFrames
CGestalt_verbosity = _CSL6.CGestalt_verbosity
CGestalt_setVerbosity = _CSL6.CGestalt_setVerbosity
CGestalt_loggingPeriod = _CSL6.CGestalt_loggingPeriod
CGestalt_setLoggingPeriod = _CSL6.CGestalt_setLoggingPeriod
CGestalt_outPort = _CSL6.CGestalt_outPort
CGestalt_setOutPort = _CSL6.CGestalt_setOutPort
CGestalt_dataFolder = _CSL6.CGestalt_dataFolder
CGestalt_setDataFolder = _CSL6.CGestalt_setDataFolder
CGestalt_stopNow = _CSL6.CGestalt_stopNow
CGestalt_setStopNow = _CSL6.CGestalt_setStopNow
CGestalt_clearStopNow = _CSL6.CGestalt_clearStopNow
CGestalt_initFileText = _CSL6.CGestalt_initFileText
CGestalt_storeToInitFile = _CSL6.CGestalt_storeToInitFile
CGestalt_sndFileName = _CSL6.CGestalt_sndFileName
CGestalt_screenWidth = _CSL6.CGestalt_screenWidth
CGestalt_setScreenWidth = _CSL6.CGestalt_setScreenWidth
CGestalt_screenHeight = _CSL6.CGestalt_screenHeight
CGestalt_setScreenHeight = _CSL6.CGestalt_setScreenHeight

kLogInfo = _CSL6.kLogInfo
kLogWarning = _CSL6.kLogWarning
kLogError = _CSL6.kLogError
kLogFatal = _CSL6.kLogFatal
logMsg = _CSL6.logMsg
logMsgNN = _CSL6.logMsgNN
logLine = _CSL6.logLine
logURL = _CSL6.logURL
vlogMsg = _CSL6.vlogMsg
sleepUsec = _CSL6.sleepUsec
sleepMsec = _CSL6.sleepMsec
sleepSec = _CSL6.sleepSec
timeNow = _CSL6.timeNow
fTimeNow = _CSL6.fTimeNow
fRandZ = _CSL6.fRandZ
fRand1 = _CSL6.fRand1
fRandV = _CSL6.fRandV
fRandM = _CSL6.fRandM
fRandR = _CSL6.fRandR
fRandB = _CSL6.fRandB
iRandV = _CSL6.iRandV
iRandM = _CSL6.iRandM
iRandB = _CSL6.iRandB
coin = _CSL6.coin
keyToFreq = _CSL6.keyToFreq
freqToKey = _CSL6.freqToKey
class Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.Model_swiginit(self, _CSL6.new_Model())
    __swig_destroy__ = _CSL6.delete_Model
    attachObserver = _swig_new_instance_method(_CSL6.Model_attachObserver)
    detachObserver = _swig_new_instance_method(_CSL6.Model_detachObserver)
    changed = _swig_new_instance_method(_CSL6.Model_changed)
    evaluate = _swig_new_instance_method(_CSL6.Model_evaluate)

# Register Model in _CSL6:
_CSL6.Model_swigregister(Model)

class Observer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_Observer
    mPeriod = property(_CSL6.Observer_mPeriod_get, _CSL6.Observer_mPeriod_set)
    mKey = property(_CSL6.Observer_mKey_get, _CSL6.Observer_mKey_set)
    update = _swig_new_instance_method(_CSL6.Observer_update)

# Register Observer in _CSL6:
_CSL6.Observer_swigregister(Observer)

kSamples = _CSL6.kSamples
kSpectra = _CSL6.kSpectra
kLPCCoeff = _CSL6.kLPCCoeff
kIRData = _CSL6.kIRData
kWavelet = _CSL6.kWavelet
kGeometry = _CSL6.kGeometry
kUnknown = _CSL6.kUnknown
class Buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, numChannels=1, numFrames=1024):
        _CSL6.Buffer_swiginit(self, _CSL6.new_Buffer(numChannels, numFrames))
    __swig_destroy__ = _CSL6.delete_Buffer
    mNumChannels = property(_CSL6.Buffer_mNumChannels_get, _CSL6.Buffer_mNumChannels_set)
    mNumFrames = property(_CSL6.Buffer_mNumFrames_get, _CSL6.Buffer_mNumFrames_set)
    mNumAlloc = property(_CSL6.Buffer_mNumAlloc_get, _CSL6.Buffer_mNumAlloc_set)
    mMonoBufferByteSize = property(_CSL6.Buffer_mMonoBufferByteSize_get, _CSL6.Buffer_mMonoBufferByteSize_set)
    mSequence = property(_CSL6.Buffer_mSequence_get, _CSL6.Buffer_mSequence_set)
    mTimestamp = property(_CSL6.Buffer_mTimestamp_get, _CSL6.Buffer_mTimestamp_set)
    duration = _swig_new_instance_method(_CSL6.Buffer_duration)
    mAreBuffersAllocated = property(_CSL6.Buffer_mAreBuffersAllocated_get, _CSL6.Buffer_mAreBuffersAllocated_set)
    mDidIAllocateBuffers = property(_CSL6.Buffer_mDidIAllocateBuffers_get, _CSL6.Buffer_mDidIAllocateBuffers_set)
    mIsPopulated = property(_CSL6.Buffer_mIsPopulated_get, _CSL6.Buffer_mIsPopulated_set)
    mAreBuffersZero = property(_CSL6.Buffer_mAreBuffersZero_get, _CSL6.Buffer_mAreBuffersZero_set)
    mType = property(_CSL6.Buffer_mType_get, _CSL6.Buffer_mType_set)
    setSize = _swig_new_instance_method(_CSL6.Buffer_setSize)
    setSizeOnly = _swig_new_instance_method(_CSL6.Buffer_setSizeOnly)
    checkBuffers = _swig_new_instance_method(_CSL6.Buffer_checkBuffers)
    allocateBuffers = _swig_new_instance_method(_CSL6.Buffer_allocateBuffers)
    freeBuffers = _swig_new_instance_method(_CSL6.Buffer_freeBuffers)
    canStore = _swig_new_instance_method(_CSL6.Buffer_canStore)
    zeroBuffers = _swig_new_instance_method(_CSL6.Buffer_zeroBuffers)
    fillWith = _swig_new_instance_method(_CSL6.Buffer_fillWith)
    scaleBy = _swig_new_instance_method(_CSL6.Buffer_scaleBy)
    copyFrom = _swig_new_instance_method(_CSL6.Buffer_copyFrom)
    copyHeaderFrom = _swig_new_instance_method(_CSL6.Buffer_copyHeaderFrom)
    copySamplesFrom = _swig_new_instance_method(_CSL6.Buffer_copySamplesFrom)
    copySamplesFromTo = _swig_new_instance_method(_CSL6.Buffer_copySamplesFromTo)
    copyOnlySamplesFrom = _swig_new_instance_method(_CSL6.Buffer_copyOnlySamplesFrom)
    readFromFile = _swig_new_instance_method(_CSL6.Buffer_readFromFile)
    convertRate = _swig_new_instance_method(_CSL6.Buffer_convertRate)
    samplePtrFor = _swig_new_instance_method(_CSL6.Buffer_samplePtrFor)
    buffer = _swig_new_instance_method(_CSL6.Buffer_buffer)
    buffers = _swig_new_instance_method(_CSL6.Buffer_buffers)
    setBuffers = _swig_new_instance_method(_CSL6.Buffer_setBuffers)
    setBuffer = _swig_new_instance_method(_CSL6.Buffer_setBuffer)
    normalize = _swig_new_instance_method(_CSL6.Buffer_normalize)
    removeDC = _swig_new_instance_method(_CSL6.Buffer_removeDC)
    rms = _swig_new_instance_method(_CSL6.Buffer_rms)
    avg = _swig_new_instance_method(_CSL6.Buffer_avg)
    max = _swig_new_instance_method(_CSL6.Buffer_max)
    min = _swig_new_instance_method(_CSL6.Buffer_min)

# Register Buffer in _CSL6:
_CSL6.Buffer_swigregister(Buffer)

class BufferCMap(Buffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.BufferCMap_swiginit(self, _CSL6.new_BufferCMap(*args))
    __swig_destroy__ = _CSL6.delete_BufferCMap
    mRealNumChannels = property(_CSL6.BufferCMap_mRealNumChannels_get, _CSL6.BufferCMap_mRealNumChannels_set)
    mChannelMap = property(_CSL6.BufferCMap_mChannelMap_get, _CSL6.BufferCMap_mChannelMap_set)

# Register BufferCMap in _CSL6:
_CSL6.BufferCMap_swigregister(BufferCMap)

kCopy = _CSL6.kCopy
kExpand = _CSL6.kExpand
kIgnore = _CSL6.kIgnore
class UnitGenerator(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.UnitGenerator_swiginit(self, _CSL6.new_UnitGenerator(*args))
    __swig_destroy__ = _CSL6.delete_UnitGenerator
    frameRate = _swig_new_instance_method(_CSL6.UnitGenerator_frameRate)
    setFrameRate = _swig_new_instance_method(_CSL6.UnitGenerator_setFrameRate)
    numChannels = _swig_new_instance_method(_CSL6.UnitGenerator_numChannels)
    setNumChannels = _swig_new_instance_method(_CSL6.UnitGenerator_setNumChannels)
    copyPolicy = _swig_new_instance_method(_CSL6.UnitGenerator_copyPolicy)
    setCopyPolicy = _swig_new_instance_method(_CSL6.UnitGenerator_setCopyPolicy)
    nextBuffer = _swig_new_instance_method(_CSL6.UnitGenerator_nextBuffer)
    isFixed = _swig_new_instance_method(_CSL6.UnitGenerator_isFixed)
    isActive = _swig_new_instance_method(_CSL6.UnitGenerator_isActive)
    addOutput = _swig_new_instance_method(_CSL6.UnitGenerator_addOutput)
    removeOutput = _swig_new_instance_method(_CSL6.UnitGenerator_removeOutput)
    outputs = _swig_new_instance_method(_CSL6.UnitGenerator_outputs)
    numOutputs = _swig_new_instance_method(_CSL6.UnitGenerator_numOutputs)
    checkFanOut = _swig_new_instance_method(_CSL6.UnitGenerator_checkFanOut)
    handleFanOut = _swig_new_instance_method(_CSL6.UnitGenerator_handleFanOut)
    setValue = _swig_new_instance_method(_CSL6.UnitGenerator_setValue)
    value = _swig_new_instance_method(_CSL6.UnitGenerator_value)
    dump = _swig_new_instance_method(_CSL6.UnitGenerator_dump)
    trigger = _swig_new_instance_method(_CSL6.UnitGenerator_trigger)

# Register UnitGenerator in _CSL6:
_CSL6.UnitGenerator_swigregister(UnitGenerator)

class Port(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Port_swiginit(self, _CSL6.new_Port(*args))
    __swig_destroy__ = _CSL6.delete_Port
    mUGen = property(_CSL6.Port_mUGen_get, _CSL6.Port_mUGen_set)
    mBuffer = property(_CSL6.Port_mBuffer_get, _CSL6.Port_mBuffer_set)
    mValue = property(_CSL6.Port_mValue_get, _CSL6.Port_mValue_set)
    mValuePtr = property(_CSL6.Port_mValuePtr_get, _CSL6.Port_mValuePtr_set)
    mPtrIncrement = property(_CSL6.Port_mPtrIncrement_get, _CSL6.Port_mPtrIncrement_set)
    mValueIndex = property(_CSL6.Port_mValueIndex_get, _CSL6.Port_mValueIndex_set)
    checkBuffer = _swig_new_instance_method(_CSL6.Port_checkBuffer)
    nextValue = _swig_new_instance_method(_CSL6.Port_nextValue)
    nextFrame = _swig_new_instance_method(_CSL6.Port_nextFrame)
    isReady = _swig_new_instance_method(_CSL6.Port_isReady)
    resetPtr = _swig_new_instance_method(_CSL6.Port_resetPtr)
    isActive = _swig_new_instance_method(_CSL6.Port_isActive)
    dump = _swig_new_instance_method(_CSL6.Port_dump)
    isFixed = _swig_new_instance_method(_CSL6.Port_isFixed)
    trigger = _swig_new_instance_method(_CSL6.Port_trigger)

# Register Port in _CSL6:
_CSL6.Port_swigregister(Port)

class Controllable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.Controllable_swiginit(self, _CSL6.new_Controllable())
    __swig_destroy__ = _CSL6.delete_Controllable
    getPort = _swig_new_instance_method(_CSL6.Controllable_getPort)

# Register Controllable in _CSL6:
_CSL6.Controllable_swigregister(Controllable)

class Scalable(Controllable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Scalable_swiginit(self, _CSL6.new_Scalable(*args))
    __swig_destroy__ = _CSL6.delete_Scalable
    setScale = _swig_new_instance_method(_CSL6.Scalable_setScale)
    setOffset = _swig_new_instance_method(_CSL6.Scalable_setOffset)
    trigger = _swig_new_instance_method(_CSL6.Scalable_trigger)
    isScaled = _swig_new_instance_method(_CSL6.Scalable_isScaled)

# Register Scalable in _CSL6:
_CSL6.Scalable_swigregister(Scalable)

class Effect(UnitGenerator, Controllable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Effect_swiginit(self, _CSL6.new_Effect(*args))
    setInput = _swig_new_instance_method(_CSL6.Effect_setInput)
    isInline = property(_CSL6.Effect_isInline_get, _CSL6.Effect_isInline_set)
    setInline = _swig_new_instance_method(_CSL6.Effect_setInline)
    __swig_destroy__ = _CSL6.delete_Effect

# Register Effect in _CSL6:
_CSL6.Effect_swigregister(Effect)

class Phased(Controllable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Phased_swiginit(self, _CSL6.new_Phased(*args))
    __swig_destroy__ = _CSL6.delete_Phased
    setFrequency = _swig_new_instance_method(_CSL6.Phased_setFrequency)
    setPhase = _swig_new_instance_method(_CSL6.Phased_setPhase)

# Register Phased in _CSL6:
_CSL6.Phased_swigregister(Phased)

class Writeable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    writeBuffer = _swig_new_instance_method(_CSL6.Writeable_writeBuffer)
    __swig_destroy__ = _CSL6.delete_Writeable

    def __init__(self):
        _CSL6.Writeable_swiginit(self, _CSL6.new_Writeable())

# Register Writeable in _CSL6:
_CSL6.Writeable_swigregister(Writeable)

kPositionStart = _CSL6.kPositionStart
kPositionCurrent = _CSL6.kPositionCurrent
kPositionEnd = _CSL6.kPositionEnd
class Seekable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_Seekable
    mCurrentFrame = property(_CSL6.Seekable_mCurrentFrame_get, _CSL6.Seekable_mCurrentFrame_set)
    mActualFrame = property(_CSL6.Seekable_mActualFrame_get, _CSL6.Seekable_mActualFrame_set)
    seekTo = _swig_new_instance_method(_CSL6.Seekable_seekTo)
    reset = _swig_new_instance_method(_CSL6.Seekable_reset)
    duration = _swig_new_instance_method(_CSL6.Seekable_duration)

# Register Seekable in _CSL6:
_CSL6.Seekable_swigregister(Seekable)

class Cacheable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Cacheable_swiginit(self, _CSL6.new_Cacheable(*args))
    mUseCache = property(_CSL6.Cacheable_mUseCache_get, _CSL6.Cacheable_mUseCache_set)
    __swig_destroy__ = _CSL6.delete_Cacheable

# Register Cacheable in _CSL6:
_CSL6.Cacheable_swigregister(Cacheable)

class FanOut(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _in, taps):
        _CSL6.FanOut_swiginit(self, _CSL6.new_FanOut(_in, taps))
    __swig_destroy__ = _CSL6.delete_FanOut
    nextBuffer = _swig_new_instance_method(_CSL6.FanOut_nextBuffer)

# Register FanOut in _CSL6:
_CSL6.FanOut_swigregister(FanOut)

class Splitter(FanOut):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _in):
        _CSL6.Splitter_swiginit(self, _CSL6.new_Splitter(_in))
    __swig_destroy__ = _CSL6.delete_Splitter
    nextBuffer = _swig_new_instance_method(_CSL6.Splitter_nextBuffer)

# Register Splitter in _CSL6:
_CSL6.Splitter_swigregister(Splitter)

class Joiner(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Joiner_swiginit(self, _CSL6.new_Joiner(*args))
    __swig_destroy__ = _CSL6.delete_Joiner
    nextBuffer = _swig_new_instance_method(_CSL6.Joiner_nextBuffer)
    addInput = _swig_new_instance_method(_CSL6.Joiner_addInput)

# Register Joiner in _CSL6:
_CSL6.Joiner_swigregister(Joiner)

class Interleaver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    interleave = _swig_new_instance_method(_CSL6.Interleaver_interleave)
    interleaveAndRemap = _swig_new_instance_method(_CSL6.Interleaver_interleaveAndRemap)
    deinterleave = _swig_new_instance_method(_CSL6.Interleaver_deinterleave)

    def __init__(self):
        _CSL6.Interleaver_swiginit(self, _CSL6.new_Interleaver())
    __swig_destroy__ = _CSL6.delete_Interleaver

# Register Interleaver in _CSL6:
_CSL6.Interleaver_swigregister(Interleaver)

kIONew = _CSL6.kIONew
kIOInit = _CSL6.kIOInit
kIOOpen = _CSL6.kIOOpen
kIORunning = _CSL6.kIORunning
kIOClosed = _CSL6.kIOClosed
kIOExit = _CSL6.kIOExit
class IO(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s_rate=44100, b_size=1024, in_device=-1, out_device=-1, in_chans=0, out_chans=2):
        _CSL6.IO_swiginit(self, _CSL6.new_IO(s_rate, b_size, in_device, out_device, in_chans, out_chans))
    __swig_destroy__ = _CSL6.delete_IO
    open = _swig_new_instance_method(_CSL6.IO_open)
    close = _swig_new_instance_method(_CSL6.IO_close)
    start = _swig_new_instance_method(_CSL6.IO_start)
    stop = _swig_new_instance_method(_CSL6.IO_stop)
    test = _swig_new_instance_method(_CSL6.IO_test)
    capture_on = _swig_new_instance_method(_CSL6.IO_capture_on)
    capture_off = _swig_new_instance_method(_CSL6.IO_capture_off)
    get_capture = _swig_new_instance_method(_CSL6.IO_get_capture)
    setRoot = _swig_new_instance_method(_CSL6.IO_setRoot)
    clearRoot = _swig_new_instance_method(_CSL6.IO_clearRoot)
    pullInput = _swig_new_instance_method(_CSL6.IO_pullInput)
    getInput = _swig_new_instance_method(_CSL6.IO_getInput)
    getAndIncrementSequence = _swig_new_instance_method(_CSL6.IO_getAndIncrementSequence)
    mGraph = property(_CSL6.IO_mGraph_get, _CSL6.IO_mGraph_set)
    mInputBuffer = property(_CSL6.IO_mInputBuffer_get, _CSL6.IO_mInputBuffer_set)
    mOutputBuffer = property(_CSL6.IO_mOutputBuffer_get, _CSL6.IO_mOutputBuffer_set)
    mCaptureBuffer = property(_CSL6.IO_mCaptureBuffer_get, _CSL6.IO_mCaptureBuffer_set)
    mInputPointer = property(_CSL6.IO_mInputPointer_get, _CSL6.IO_mInputPointer_set)
    mChannelMap = property(_CSL6.IO_mChannelMap_get, _CSL6.IO_mChannelMap_set)
    mNumFramesPlayed = property(_CSL6.IO_mNumFramesPlayed_get, _CSL6.IO_mNumFramesPlayed_set)
    mSequence = property(_CSL6.IO_mSequence_get, _CSL6.IO_mSequence_set)
    mLoggingPeriod = property(_CSL6.IO_mLoggingPeriod_get, _CSL6.IO_mLoggingPeriod_set)
    mNumInChannels = property(_CSL6.IO_mNumInChannels_get, _CSL6.IO_mNumInChannels_set)
    mNumOutChannels = property(_CSL6.IO_mNumOutChannels_get, _CSL6.IO_mNumOutChannels_set)
    mNumRealInChannels = property(_CSL6.IO_mNumRealInChannels_get, _CSL6.IO_mNumRealInChannels_set)
    mNumRealOutChannels = property(_CSL6.IO_mNumRealOutChannels_get, _CSL6.IO_mNumRealOutChannels_set)
    mStatus = property(_CSL6.IO_mStatus_get, _CSL6.IO_mStatus_set)
    mInterleaved = property(_CSL6.IO_mInterleaved_get, _CSL6.IO_mInterleaved_set)
    mOffset = property(_CSL6.IO_mOffset_get, _CSL6.IO_mOffset_set)
    mThen = property(_CSL6.IO_mThen_get, _CSL6.IO_mThen_set)
    mNow = property(_CSL6.IO_mNow_get, _CSL6.IO_mNow_set)
    mTimeVals = property(_CSL6.IO_mTimeVals_get, _CSL6.IO_mTimeVals_set)
    mThisSec = property(_CSL6.IO_mThisSec_get, _CSL6.IO_mThisSec_set)
    mTimeSum = property(_CSL6.IO_mTimeSum_get, _CSL6.IO_mTimeSum_set)
    mUsage = property(_CSL6.IO_mUsage_get, _CSL6.IO_mUsage_set)
    printTimeStatistics = _swig_new_instance_method(_CSL6.IO_printTimeStatistics)

# Register IO in _CSL6:
_CSL6.IO_swigregister(IO)

class IODevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.IODevice_swiginit(self, _CSL6.new_IODevice(*args))
    mName = property(_CSL6.IODevice_mName_get, _CSL6.IODevice_mName_set)
    mIndex = property(_CSL6.IODevice_mIndex_get, _CSL6.IODevice_mIndex_set)
    mMaxInputChannels = property(_CSL6.IODevice_mMaxInputChannels_get, _CSL6.IODevice_mMaxInputChannels_set)
    mMaxOutputChannels = property(_CSL6.IODevice_mMaxOutputChannels_get, _CSL6.IODevice_mMaxOutputChannels_set)
    mFrameRate = property(_CSL6.IODevice_mFrameRate_get, _CSL6.IODevice_mFrameRate_set)
    mFrameRates = property(_CSL6.IODevice_mFrameRates_get, _CSL6.IODevice_mFrameRates_set)
    mIsDefaultIn = property(_CSL6.IODevice_mIsDefaultIn_get, _CSL6.IODevice_mIsDefaultIn_set)
    mIsDefaultOut = property(_CSL6.IODevice_mIsDefaultOut_get, _CSL6.IODevice_mIsDefaultOut_set)
    dump = _swig_new_instance_method(_CSL6.IODevice_dump)
    __swig_destroy__ = _CSL6.delete_IODevice

# Register IODevice in _CSL6:
_CSL6.IODevice_swigregister(IODevice)

class RingBufferTap(UnitGenerator, Scalable, Seekable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent=None, offset=0):
        _CSL6.RingBufferTap_swiginit(self, _CSL6.new_RingBufferTap(parent, offset))
    mLoopStartFrame = property(_CSL6.RingBufferTap_mLoopStartFrame_get, _CSL6.RingBufferTap_mLoopStartFrame_set)
    mLoopEndFrame = property(_CSL6.RingBufferTap_mLoopEndFrame_get, _CSL6.RingBufferTap_mLoopEndFrame_set)
    setOffset = _swig_new_instance_method(_CSL6.RingBufferTap_setOffset)
    setLoopStart = _swig_new_instance_method(_CSL6.RingBufferTap_setLoopStart)
    setLoopEnd = _swig_new_instance_method(_CSL6.RingBufferTap_setLoopEnd)
    setBuffer = _swig_new_instance_method(_CSL6.RingBufferTap_setBuffer)
    nextBuffer = _swig_new_instance_method(_CSL6.RingBufferTap_nextBuffer)
    destructiveNextBuffer = _swig_new_instance_method(_CSL6.RingBufferTap_destructiveNextBuffer)
    __swig_destroy__ = _CSL6.delete_RingBufferTap

# Register RingBufferTap in _CSL6:
_CSL6.RingBufferTap_swigregister(RingBufferTap)

class RingBuffer(Effect, Scalable, Writeable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.RingBuffer_swiginit(self, _CSL6.new_RingBuffer(*args))
    mCurrentWriteFrame = property(_CSL6.RingBuffer_mCurrentWriteFrame_get, _CSL6.RingBuffer_mCurrentWriteFrame_set)
    mBuffer = property(_CSL6.RingBuffer_mBuffer_get, _CSL6.RingBuffer_mBuffer_set)
    mTap = property(_CSL6.RingBuffer_mTap_get, _CSL6.RingBuffer_mTap_set)
    seekTo = _swig_new_instance_method(_CSL6.RingBuffer_seekTo)
    setLoopStart = _swig_new_instance_method(_CSL6.RingBuffer_setLoopStart)
    setLoopEnd = _swig_new_instance_method(_CSL6.RingBuffer_setLoopEnd)
    destructiveNextBuffer = _swig_new_instance_method(_CSL6.RingBuffer_destructiveNextBuffer)
    writeBuffer = _swig_new_instance_method(_CSL6.RingBuffer_writeBuffer)
    sumIntoBuffer = _swig_new_instance_method(_CSL6.RingBuffer_sumIntoBuffer)
    __swig_destroy__ = _CSL6.delete_RingBuffer

# Register RingBuffer in _CSL6:
_CSL6.RingBuffer_swigregister(RingBuffer)

class BufferStream(UnitGenerator, Seekable, Writeable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.BufferStream_swiginit(self, _CSL6.new_BufferStream(*args))
    __swig_destroy__ = _CSL6.delete_BufferStream
    setBuffer = _swig_new_instance_method(_CSL6.BufferStream_setBuffer)
    nextBuffer = _swig_new_instance_method(_CSL6.BufferStream_nextBuffer)
    writeBuffer = _swig_new_instance_method(_CSL6.BufferStream_writeBuffer)

# Register BufferStream in _CSL6:
_CSL6.BufferStream_swigregister(BufferStream)

class CVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.CVariable_swiginit(self, _CSL6.new_CVariable(*args))
    value = _swig_new_instance_method(_CSL6.CVariable_value)
    setValue = _swig_new_instance_method(_CSL6.CVariable_setValue)
    __swig_destroy__ = _CSL6.delete_CVariable

# Register CVariable in _CSL6:
_CSL6.CVariable_swigregister(CVariable)

class StaticVariable(CVariable, UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.StaticVariable_swiginit(self, _CSL6.new_StaticVariable(*args))
    value = _swig_new_instance_method(_CSL6.StaticVariable_value)
    setValue = _swig_new_instance_method(_CSL6.StaticVariable_setValue)
    __swig_destroy__ = _CSL6.delete_StaticVariable

# Register StaticVariable in _CSL6:
_CSL6.StaticVariable_swigregister(StaticVariable)

kOpPlus = _CSL6.kOpPlus
kOpTimes = _CSL6.kOpTimes
kOpMinus = _CSL6.kOpMinus
kOpDivided = _CSL6.kOpDivided
kOpNegated = _CSL6.kOpNegated
class DynamicVariable(CVariable, Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.DynamicVariable_swiginit(self, _CSL6.new_DynamicVariable(*args))
    setValue = _swig_new_instance_method(_CSL6.DynamicVariable_setValue)
    __swig_destroy__ = _CSL6.delete_DynamicVariable

# Register DynamicVariable in _CSL6:
_CSL6.DynamicVariable_swigregister(DynamicVariable)

class BlockResizer(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, input, blockSize):
        _CSL6.BlockResizer_swiginit(self, _CSL6.new_BlockResizer(input, blockSize))
    __swig_destroy__ = _CSL6.delete_BlockResizer

# Register BlockResizer in _CSL6:
_CSL6.BlockResizer_swigregister(BlockResizer)

kCartesian = _CSL6.kCartesian
kPolar = _CSL6.kPolar
class CPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimn = property(_CSL6.CPoint_dimn_get, _CSL6.CPoint_dimn_set)
    x = property(_CSL6.CPoint_x_get, _CSL6.CPoint_x_set)
    y = property(_CSL6.CPoint_y_get, _CSL6.CPoint_y_set)
    z = property(_CSL6.CPoint_z_get, _CSL6.CPoint_z_set)

    def __init__(self, *args):
        _CSL6.CPoint_swiginit(self, _CSL6.new_CPoint(*args))
    __swig_destroy__ = _CSL6.delete_CPoint
    set = _swig_new_instance_method(_CSL6.CPoint_set)
    setAzimuth = _swig_new_instance_method(_CSL6.CPoint_setAzimuth)
    setElevation = _swig_new_instance_method(_CSL6.CPoint_setElevation)
    setMagnitude = _swig_new_instance_method(_CSL6.CPoint_setMagnitude)
    dim = _swig_new_instance_method(_CSL6.CPoint_dim)
    setdim = _swig_new_instance_method(_CSL6.CPoint_setdim)
    __neg__ = _swig_new_instance_method(_CSL6.CPoint___neg__)
    __invert__ = _swig_new_instance_method(_CSL6.CPoint___invert__)
    __eq__ = _swig_new_instance_method(_CSL6.CPoint___eq__)
    __ne__ = _swig_new_instance_method(_CSL6.CPoint___ne__)
    __add__ = _swig_new_instance_method(_CSL6.CPoint___add__)
    __sub__ = _swig_new_instance_method(_CSL6.CPoint___sub__)
    __mul__ = _swig_new_instance_method(_CSL6.CPoint___mul__)
    __or__ = _swig_new_instance_method(_CSL6.CPoint___or__)
    __xor__ = _swig_new_instance_method(_CSL6.CPoint___xor__)
    __imul__ = _swig_new_instance_method(_CSL6.CPoint___imul__)

    def __itruediv__(self, *args):
        return _CSL6.CPoint___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __iadd__ = _swig_new_instance_method(_CSL6.CPoint___iadd__)
    __isub__ = _swig_new_instance_method(_CSL6.CPoint___isub__)
    __ixor__ = _swig_new_instance_method(_CSL6.CPoint___ixor__)
    distance = _swig_new_instance_method(_CSL6.CPoint_distance)
    distance2 = _swig_new_instance_method(_CSL6.CPoint_distance2)
    __call__ = _swig_new_instance_method(_CSL6.CPoint___call__)
    len = _swig_new_instance_method(_CSL6.CPoint_len)
    len2 = _swig_new_instance_method(_CSL6.CPoint_len2)
    r = _swig_new_instance_method(_CSL6.CPoint_r)
    theta = _swig_new_instance_method(_CSL6.CPoint_theta)
    phi = _swig_new_instance_method(_CSL6.CPoint_phi)
    ele = _swig_new_instance_method(_CSL6.CPoint_ele)
    rotateBy = _swig_new_instance_method(_CSL6.CPoint_rotateBy)
    dump = _swig_new_instance_method(_CSL6.CPoint_dump)
    dumpPol = _swig_new_instance_method(_CSL6.CPoint_dumpPol)
    normalize = _swig_new_instance_method(_CSL6.CPoint_normalize)

# Register CPoint in _CSL6:
_CSL6.CPoint_swigregister(CPoint)

class CThread(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.CThread_swiginit(self, _CSL6.new_CThread())
    __swig_destroy__ = _CSL6.delete_CThread
    MakeThread = _swig_new_static_method(_CSL6.CThread_MakeThread)
    createThread = _swig_new_instance_method(_CSL6.CThread_createThread)
    run = _swig_new_instance_method(_CSL6.CThread_run)

# Register CThread in _CSL6:
_CSL6.CThread_swigregister(CThread)
CThread_MakeThread = _CSL6.CThread_MakeThread

class Window(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Window_swiginit(self, _CSL6.new_Window(*args))
    __swig_destroy__ = _CSL6.delete_Window
    setSize = _swig_new_instance_method(_CSL6.Window_setSize)
    setGain = _swig_new_instance_method(_CSL6.Window_setGain)
    window = _swig_new_instance_method(_CSL6.Window_window)

# Register Window in _CSL6:
_CSL6.Window_swigregister(Window)

class RectangularWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.RectangularWindow_swiginit(self, _CSL6.new_RectangularWindow(*args))
    __swig_destroy__ = _CSL6.delete_RectangularWindow

# Register RectangularWindow in _CSL6:
_CSL6.RectangularWindow_swigregister(RectangularWindow)

class TriangularWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.TriangularWindow_swiginit(self, _CSL6.new_TriangularWindow(*args))
    __swig_destroy__ = _CSL6.delete_TriangularWindow

# Register TriangularWindow in _CSL6:
_CSL6.TriangularWindow_swigregister(TriangularWindow)

class HammingWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.HammingWindow_swiginit(self, _CSL6.new_HammingWindow(*args))
    __swig_destroy__ = _CSL6.delete_HammingWindow

# Register HammingWindow in _CSL6:
_CSL6.HammingWindow_swigregister(HammingWindow)

class HannWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.HannWindow_swiginit(self, _CSL6.new_HannWindow(*args))
    __swig_destroy__ = _CSL6.delete_HannWindow

# Register HannWindow in _CSL6:
_CSL6.HannWindow_swigregister(HannWindow)

class BlackmanWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.BlackmanWindow_swiginit(self, _CSL6.new_BlackmanWindow(*args))
    __swig_destroy__ = _CSL6.delete_BlackmanWindow

# Register BlackmanWindow in _CSL6:
_CSL6.BlackmanWindow_swigregister(BlackmanWindow)

class BlackmanHarrisWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.BlackmanHarrisWindow_swiginit(self, _CSL6.new_BlackmanHarrisWindow(*args))
    __swig_destroy__ = _CSL6.delete_BlackmanHarrisWindow

# Register BlackmanHarrisWindow in _CSL6:
_CSL6.BlackmanHarrisWindow_swigregister(BlackmanHarrisWindow)

class WelchWindow(Window):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.WelchWindow_swiginit(self, _CSL6.new_WelchWindow(*args))
    __swig_destroy__ = _CSL6.delete_WelchWindow

# Register WelchWindow in _CSL6:
_CSL6.WelchWindow_swigregister(WelchWindow)

kLine = _CSL6.kLine
kExpon = _CSL6.kExpon
class LineSegment(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.LineSegment_swiginit(self, _CSL6.new_LineSegment(*args))
    start = _swig_new_instance_method(_CSL6.LineSegment_start)
    end = _swig_new_instance_method(_CSL6.LineSegment_end)
    duration = _swig_new_instance_method(_CSL6.LineSegment_duration)
    currentFrame = _swig_new_instance_method(_CSL6.LineSegment_currentFrame)
    setEnd = _swig_new_instance_method(_CSL6.LineSegment_setEnd)
    setStart = _swig_new_instance_method(_CSL6.LineSegment_setStart)
    setDuration = _swig_new_instance_method(_CSL6.LineSegment_setDuration)
    setMode = _swig_new_instance_method(_CSL6.LineSegment_setMode)
    nextBuffer = _swig_new_instance_method(_CSL6.LineSegment_nextBuffer)
    reset = _swig_new_instance_method(_CSL6.LineSegment_reset)
    __swig_destroy__ = _CSL6.delete_LineSegment

# Register LineSegment in _CSL6:
_CSL6.LineSegment_swigregister(LineSegment)

class Envelope(UnitGenerator, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Envelope_swiginit(self, _CSL6.new_Envelope(*args))
    __swig_destroy__ = _CSL6.delete_Envelope
    addBreakpoint = _swig_new_instance_method(_CSL6.Envelope_addBreakpoint)
    setMode = _swig_new_instance_method(_CSL6.Envelope_setMode)
    setDuration = _swig_new_instance_method(_CSL6.Envelope_setDuration)
    scaleTimes = _swig_new_instance_method(_CSL6.Envelope_scaleTimes)
    scaleValues = _swig_new_instance_method(_CSL6.Envelope_scaleValues)
    reset = _swig_new_instance_method(_CSL6.Envelope_reset)

# Register Envelope in _CSL6:
_CSL6.Envelope_swigregister(Envelope)

class ADSR(Envelope):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.ADSR_swiginit(self, _CSL6.new_ADSR(*args))
    __swig_destroy__ = _CSL6.delete_ADSR
    setDelay = _swig_new_instance_method(_CSL6.ADSR_setDelay)
    setAttack = _swig_new_instance_method(_CSL6.ADSR_setAttack)
    setDecay = _swig_new_instance_method(_CSL6.ADSR_setDecay)
    setSustain = _swig_new_instance_method(_CSL6.ADSR_setSustain)
    setRelease = _swig_new_instance_method(_CSL6.ADSR_setRelease)
    release = _swig_new_instance_method(_CSL6.ADSR_release)

# Register ADSR in _CSL6:
_CSL6.ADSR_swigregister(ADSR)

class AR(Envelope):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.AR_swiginit(self, _CSL6.new_AR(*args))
    __swig_destroy__ = _CSL6.delete_AR
    setDelay = _swig_new_instance_method(_CSL6.AR_setDelay)
    setAttack = _swig_new_instance_method(_CSL6.AR_setAttack)
    setRelease = _swig_new_instance_method(_CSL6.AR_setRelease)
    setAll = _swig_new_instance_method(_CSL6.AR_setAll)
    release = _swig_new_instance_method(_CSL6.AR_release)

# Register AR in _CSL6:
_CSL6.AR_swigregister(AR)

class Triangle(Envelope):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Triangle_swiginit(self, _CSL6.new_Triangle(*args))
    __swig_destroy__ = _CSL6.delete_Triangle

# Register Triangle in _CSL6:
_CSL6.Triangle_swigregister(Triangle)

class RandEnvelope(Envelope):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=1, amplitude=1, offset=0, step=0):
        _CSL6.RandEnvelope_swiginit(self, _CSL6.new_RandEnvelope(frequency, amplitude, offset, step))
    __swig_destroy__ = _CSL6.delete_RandEnvelope
    setWalk = _swig_new_instance_method(_CSL6.RandEnvelope_setWalk)
    setAmplitude = _swig_new_instance_method(_CSL6.RandEnvelope_setAmplitude)
    setFrequency = _swig_new_instance_method(_CSL6.RandEnvelope_setFrequency)
    setStep = _swig_new_instance_method(_CSL6.RandEnvelope_setStep)
    setOffset = _swig_new_instance_method(_CSL6.RandEnvelope_setOffset)

# Register RandEnvelope in _CSL6:
_CSL6.RandEnvelope_swigregister(RandEnvelope)

DEFAULT_WAVETABLE_SIZE = _CSL6.DEFAULT_WAVETABLE_SIZE
class Oscillator(UnitGenerator, Phased, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Oscillator_swiginit(self, _CSL6.new_Oscillator(*args))
    __swig_destroy__ = _CSL6.delete_Oscillator

# Register Oscillator in _CSL6:
_CSL6.Oscillator_swigregister(Oscillator)

kTruncate = _CSL6.kTruncate
kLinear = _CSL6.kLinear
kCubic = _CSL6.kCubic
kAllPass = _CSL6.kAllPass
class WavetableOscillator(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.WavetableOscillator_swiginit(self, _CSL6.new_WavetableOscillator(*args))
    __swig_destroy__ = _CSL6.delete_WavetableOscillator
    setWaveform = _swig_new_instance_method(_CSL6.WavetableOscillator_setWaveform)
    setInterpolate = _swig_new_instance_method(_CSL6.WavetableOscillator_setInterpolate)
    mInterpolate = property(_CSL6.WavetableOscillator_mInterpolate_get, _CSL6.WavetableOscillator_mInterpolate_set)
    mWavetable = property(_CSL6.WavetableOscillator_mWavetable_get, _CSL6.WavetableOscillator_mWavetable_set)

# Register WavetableOscillator in _CSL6:
_CSL6.WavetableOscillator_swigregister(WavetableOscillator)

class CompOrCacheOscillator(WavetableOscillator, Cacheable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    createCache = _swig_new_instance_method(_CSL6.CompOrCacheOscillator_createCache)
    __swig_destroy__ = _CSL6.delete_CompOrCacheOscillator

# Register CompOrCacheOscillator in _CSL6:
_CSL6.CompOrCacheOscillator_swigregister(CompOrCacheOscillator)

class Sine(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220, ampl=1.0, offset=0.0, phase=0.0):
        _CSL6.Sine_swiginit(self, _CSL6.new_Sine(frequency, ampl, offset, phase))
    __swig_destroy__ = _CSL6.delete_Sine

# Register Sine in _CSL6:
_CSL6.Sine_swigregister(Sine)

class FSine(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220, ampl=1.0, offset=0.0, phase=0.0):
        _CSL6.FSine_swiginit(self, _CSL6.new_FSine(frequency, ampl, offset, phase))
    __swig_destroy__ = _CSL6.delete_FSine

# Register FSine in _CSL6:
_CSL6.FSine_swigregister(FSine)

class Sawtooth(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220, ampl=1.0, offset=0.0, phase=0.0):
        _CSL6.Sawtooth_swiginit(self, _CSL6.new_Sawtooth(frequency, ampl, offset, phase))
    __swig_destroy__ = _CSL6.delete_Sawtooth

# Register Sawtooth in _CSL6:
_CSL6.Sawtooth_swigregister(Sawtooth)

class Square(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220, ampl=1.0, offset=0.0, phase=0.0):
        _CSL6.Square_swiginit(self, _CSL6.new_Square(frequency, ampl, offset, phase))
    __swig_destroy__ = _CSL6.delete_Square

# Register Square in _CSL6:
_CSL6.Square_swigregister(Square)

class Impulse(Oscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Impulse_swiginit(self, _CSL6.new_Impulse(*args))
    __swig_destroy__ = _CSL6.delete_Impulse

# Register Impulse in _CSL6:
_CSL6.Impulse_swigregister(Impulse)

class Partial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    number = property(_CSL6.Partial_number_get, _CSL6.Partial_number_set)
    amplitude = property(_CSL6.Partial_amplitude_get, _CSL6.Partial_amplitude_set)
    phase = property(_CSL6.Partial_phase_get, _CSL6.Partial_phase_set)

    def __init__(self):
        _CSL6.Partial_swiginit(self, _CSL6.new_Partial())
    __swig_destroy__ = _CSL6.delete_Partial

# Register Partial in _CSL6:
_CSL6.Partial_swigregister(Partial)

kFrequency = _CSL6.kFrequency
kFreqAmp = _CSL6.kFreqAmp
kFreqAmpPhase = _CSL6.kFreqAmpPhase
class SumOfSines(CompOrCacheOscillator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.SumOfSines_swiginit(self, _CSL6.new_SumOfSines(*args))
    addPartials = _swig_new_instance_method(_CSL6.SumOfSines_addPartials)
    addPartial = _swig_new_instance_method(_CSL6.SumOfSines_addPartial)
    clearPartials = _swig_new_instance_method(_CSL6.SumOfSines_clearPartials)
    __swig_destroy__ = _CSL6.delete_SumOfSines

# Register SumOfSines in _CSL6:
_CSL6.SumOfSines_swigregister(SumOfSines)

PINK_MAX_RANDOM_ROWS = _CSL6.PINK_MAX_RANDOM_ROWS
PINK_RANDOM_BITS = _CSL6.PINK_RANDOM_BITS
class Noise(UnitGenerator, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    generateRandomNumber = _swig_new_instance_method(_CSL6.Noise_generateRandomNumber)
    generateNormalizedRandomNumber = _swig_new_instance_method(_CSL6.Noise_generateNormalizedRandomNumber)
    setSeed = _swig_new_instance_method(_CSL6.Noise_setSeed)

    def __init__(self, *args):
        _CSL6.Noise_swiginit(self, _CSL6.new_Noise(*args))
    __swig_destroy__ = _CSL6.delete_Noise

# Register Noise in _CSL6:
_CSL6.Noise_swigregister(Noise)

class WhiteNoise(Noise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.WhiteNoise_swiginit(self, _CSL6.new_WhiteNoise(*args))
    __swig_destroy__ = _CSL6.delete_WhiteNoise

# Register WhiteNoise in _CSL6:
_CSL6.WhiteNoise_swigregister(WhiteNoise)

class PinkNoise(Noise):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.PinkNoise_swiginit(self, _CSL6.new_PinkNoise(*args))
    __swig_destroy__ = _CSL6.delete_PinkNoise
    nextPink = _swig_new_instance_method(_CSL6.PinkNoise_nextPink)

# Register PinkNoise in _CSL6:
_CSL6.PinkNoise_swigregister(PinkNoise)

class FFT(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.FFT_swiginit(self, _CSL6.new_FFT(*args))
    __swig_destroy__ = _CSL6.delete_FFT
    fftSize = _swig_new_instance_method(_CSL6.FFT_fftSize)
    mOverwriteOutput = property(_CSL6.FFT_mOverwriteOutput_get, _CSL6.FFT_mOverwriteOutput_set)

# Register FFT in _CSL6:
_CSL6.FFT_swigregister(FFT)

class IFFT(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.IFFT_swiginit(self, _CSL6.new_IFFT(*args))
    __swig_destroy__ = _CSL6.delete_IFFT
    fftSize = _swig_new_instance_method(_CSL6.IFFT_fftSize)
    binValue = _swig_new_instance_method(_CSL6.IFFT_binValue)
    binValueMagPhase = _swig_new_instance_method(_CSL6.IFFT_binValueMagPhase)
    setBin = _swig_new_instance_method(_CSL6.IFFT_setBin)
    setBins = _swig_new_instance_method(_CSL6.IFFT_setBins)
    setBinMagPhase = _swig_new_instance_method(_CSL6.IFFT_setBinMagPhase)
    setBinsMagPhase = _swig_new_instance_method(_CSL6.IFFT_setBinsMagPhase)

# Register IFFT in _CSL6:
_CSL6.IFFT_swigregister(IFFT)

class KarplusString(UnitGenerator, Scalable, Phased):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frequency=220.0):
        _CSL6.KarplusString_swiginit(self, _CSL6.new_KarplusString(frequency))
    setFrequency = _swig_new_instance_method(_CSL6.KarplusString_setFrequency)
    mDelayLine = property(_CSL6.KarplusString_mDelayLine_get, _CSL6.KarplusString_mDelayLine_set)
    __swig_destroy__ = _CSL6.delete_KarplusString

# Register KarplusString in _CSL6:
_CSL6.KarplusString_swigregister(KarplusString)

MAX_PARTIALS = _CSL6.MAX_PARTIALS
MAX_SPECTRA = _CSL6.MAX_SPECTRA
MAX_INSTRUMENTS = _CSL6.MAX_INSTRUMENTS
class SHARCSpectrum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _note_name = property(_CSL6.SHARCSpectrum__note_name_get, _CSL6.SHARCSpectrum__note_name_set)
    _midi_key = property(_CSL6.SHARCSpectrum__midi_key_get, _CSL6.SHARCSpectrum__midi_key_set)
    _nom_pitch = property(_CSL6.SHARCSpectrum__nom_pitch_get, _CSL6.SHARCSpectrum__nom_pitch_set)
    _actual_pitch = property(_CSL6.SHARCSpectrum__actual_pitch_get, _CSL6.SHARCSpectrum__actual_pitch_set)
    _max_amp = property(_CSL6.SHARCSpectrum__max_amp_get, _CSL6.SHARCSpectrum__max_amp_set)
    _num_partials = property(_CSL6.SHARCSpectrum__num_partials_get, _CSL6.SHARCSpectrum__num_partials_set)
    _partials = property(_CSL6.SHARCSpectrum__partials_get, _CSL6.SHARCSpectrum__partials_set)

    def __init__(self, folder, name, m_key, n_pitch, a_pitch, m_amp, n_partials):
        _CSL6.SHARCSpectrum_swiginit(self, _CSL6.new_SHARCSpectrum(folder, name, m_key, n_pitch, a_pitch, m_amp, n_partials))
    __swig_destroy__ = _CSL6.delete_SHARCSpectrum
    read_from_file = _swig_new_instance_method(_CSL6.SHARCSpectrum_read_from_file)
    count_partials = _swig_new_instance_method(_CSL6.SHARCSpectrum_count_partials)
    dump_example = _swig_new_instance_method(_CSL6.SHARCSpectrum_dump_example)

# Register SHARCSpectrum in _CSL6:
_CSL6.SHARCSpectrum_swigregister(SHARCSpectrum)

class SHARCInstrument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _name = property(_CSL6.SHARCInstrument__name_get, _CSL6.SHARCInstrument__name_set)
    _num_spectra = property(_CSL6.SHARCInstrument__num_spectra_get, _CSL6.SHARCInstrument__num_spectra_set)
    _spectra = property(_CSL6.SHARCInstrument__spectra_get, _CSL6.SHARCInstrument__spectra_set)

    def __init__(self, folder, name):
        _CSL6.SHARCInstrument_swiginit(self, _CSL6.new_SHARCInstrument(folder, name))
    __swig_destroy__ = _CSL6.delete_SHARCInstrument
    spectrum_names = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_names)
    spectrum_keys = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_keys)
    spectrum_frequencies = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_frequencies)
    spectrum_named = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_named)
    spectrum_with_key = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_with_key)
    spectrum_with_frequency = _swig_new_instance_method(_CSL6.SHARCInstrument_spectrum_with_frequency)
    count_spectra = _swig_new_instance_method(_CSL6.SHARCInstrument_count_spectra)
    count_partials = _swig_new_instance_method(_CSL6.SHARCInstrument_count_partials)
    dump_example = _swig_new_instance_method(_CSL6.SHARCInstrument_dump_example)

# Register SHARCInstrument in _CSL6:
_CSL6.SHARCInstrument_swigregister(SHARCInstrument)

class SHARCLibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _num_instruments = property(_CSL6.SHARCLibrary__num_instruments_get, _CSL6.SHARCLibrary__num_instruments_set)
    _instruments = property(_CSL6.SHARCLibrary__instruments_get, _CSL6.SHARCLibrary__instruments_set)

    def __init__(self, *args):
        _CSL6.SHARCLibrary_swiginit(self, _CSL6.new_SHARCLibrary(*args))
    __swig_destroy__ = _CSL6.delete_SHARCLibrary
    instrument_names = _swig_new_instance_method(_CSL6.SHARCLibrary_instrument_names)
    instrument_named = _swig_new_instance_method(_CSL6.SHARCLibrary_instrument_named)
    spectrum_named = _swig_new_instance_method(_CSL6.SHARCLibrary_spectrum_named)
    dump = _swig_new_instance_method(_CSL6.SHARCLibrary_dump)
    dump_stats = _swig_new_instance_method(_CSL6.SHARCLibrary_dump_stats)
    dump_example = _swig_new_instance_method(_CSL6.SHARCLibrary_dump_example)
    sSHARCLib = property(_CSL6.SHARCLibrary_sSHARCLib_get, _CSL6.SHARCLibrary_sSHARCLib_set)
    loadDefault = _swig_new_static_method(_CSL6.SHARCLibrary_loadDefault)
    library = _swig_new_static_method(_CSL6.SHARCLibrary_library)
    instrument = _swig_new_static_method(_CSL6.SHARCLibrary_instrument)
    spectrum = _swig_new_static_method(_CSL6.SHARCLibrary_spectrum)

# Register SHARCLibrary in _CSL6:
_CSL6.SHARCLibrary_swigregister(SHARCLibrary)
cvar = _CSL6.cvar
SHARCLibrary_loadDefault = _CSL6.SHARCLibrary_loadDefault
SHARCLibrary_library = _CSL6.SHARCLibrary_library
SHARCLibrary_instrument = _CSL6.SHARCLibrary_instrument
SHARCLibrary_spectrum = _CSL6.SHARCLibrary_spectrum

class BinaryOp(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_BinaryOp
    setOperand = _swig_new_instance_method(_CSL6.BinaryOp_setOperand)

# Register BinaryOp in _CSL6:
_CSL6.BinaryOp_swigregister(BinaryOp)

class AddOp(BinaryOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.AddOp_swiginit(self, _CSL6.new_AddOp(*args))
    __swig_destroy__ = _CSL6.delete_AddOp

# Register AddOp in _CSL6:
_CSL6.AddOp_swigregister(AddOp)

class MulOp(BinaryOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.MulOp_swiginit(self, _CSL6.new_MulOp(*args))
    setScale = _swig_new_instance_method(_CSL6.MulOp_setScale)
    __swig_destroy__ = _CSL6.delete_MulOp

# Register MulOp in _CSL6:
_CSL6.MulOp_swigregister(MulOp)

kNoProc = _CSL6.kNoProc
kLR2M = _CSL6.kLR2M
kL2M = _CSL6.kL2M
kR2M = _CSL6.kR2M
kN2M = _CSL6.kN2M
class InOut(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.InOut_swiginit(self, _CSL6.new_InOut(*args))
    __swig_destroy__ = _CSL6.delete_InOut
    setInChan = _swig_new_instance_method(_CSL6.InOut_setInChan)
    setOutChan = _swig_new_instance_method(_CSL6.InOut_setOutChan)
    getInChan = _swig_new_instance_method(_CSL6.InOut_getInChan)
    getOutChan = _swig_new_instance_method(_CSL6.InOut_getOutChan)
    setChanMap = _swig_new_instance_method(_CSL6.InOut_setChanMap)
    setChanGains = _swig_new_instance_method(_CSL6.InOut_setChanGains)
    setGain = _swig_new_instance_method(_CSL6.InOut_setGain)

# Register InOut in _CSL6:
_CSL6.InOut_swigregister(InOut)

FILTER_MAX_COEFFICIENTS = _CSL6.FILTER_MAX_COEFFICIENTS
BW_LOW_PASS = _CSL6.BW_LOW_PASS
BW_HIGH_PASS = _CSL6.BW_HIGH_PASS
BW_BAND_PASS = _CSL6.BW_BAND_PASS
BW_BAND_STOP = _CSL6.BW_BAND_STOP
BW_LOW_SHELF = _CSL6.BW_LOW_SHELF
BW_HIGH_SHELF = _CSL6.BW_HIGH_SHELF
PEAKING = _CSL6.PEAKING
ALL_PASS = _CSL6.ALL_PASS
class FrequencyAmount(Controllable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.FrequencyAmount_swiginit(self, _CSL6.new_FrequencyAmount())
    __swig_destroy__ = _CSL6.delete_FrequencyAmount
    setFrequency = _swig_new_instance_method(_CSL6.FrequencyAmount_setFrequency)
    getFrequency = _swig_new_instance_method(_CSL6.FrequencyAmount_getFrequency)
    setAmount = _swig_new_instance_method(_CSL6.FrequencyAmount_setAmount)

# Register FrequencyAmount in _CSL6:
_CSL6.FrequencyAmount_swigregister(FrequencyAmount)

class Filter(Effect, Scalable, FrequencyAmount):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Filter_swiginit(self, _CSL6.new_Filter(*args))
    __swig_destroy__ = _CSL6.delete_Filter
    clear = _swig_new_instance_method(_CSL6.Filter_clear)
    setupCoeffs = _swig_new_instance_method(_CSL6.Filter_setupCoeffs)

# Register Filter in _CSL6:
_CSL6.Filter_swigregister(Filter)

class Butter(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Butter_swiginit(self, _CSL6.new_Butter(*args))
    __swig_destroy__ = _CSL6.delete_Butter

# Register Butter in _CSL6:
_CSL6.Butter_swigregister(Butter)

class Biquad(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Biquad_swiginit(self, _CSL6.new_Biquad(*args))
    setQ = _swig_new_instance_method(_CSL6.Biquad_setQ)
    setFrq = _swig_new_instance_method(_CSL6.Biquad_setFrq)
    incrFrq = _swig_new_instance_method(_CSL6.Biquad_incrFrq)
    setBoost = _swig_new_instance_method(_CSL6.Biquad_setBoost)
    incrBoost = _swig_new_instance_method(_CSL6.Biquad_incrBoost)
    __swig_destroy__ = _CSL6.delete_Biquad

# Register Biquad in _CSL6:
_CSL6.Biquad_swigregister(Biquad)

class Formant(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Formant_swiginit(self, _CSL6.new_Formant(*args))
    __swig_destroy__ = _CSL6.delete_Formant
    setNormalize = _swig_new_instance_method(_CSL6.Formant_setNormalize)

# Register Formant in _CSL6:
_CSL6.Formant_swigregister(Formant)

class Notch(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Notch_swiginit(self, _CSL6.new_Notch(*args))
    __swig_destroy__ = _CSL6.delete_Notch

# Register Notch in _CSL6:
_CSL6.Notch_swigregister(Notch)

class Allpass(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Allpass_swiginit(self, _CSL6.new_Allpass(*args))
    __swig_destroy__ = _CSL6.delete_Allpass

# Register Allpass in _CSL6:
_CSL6.Allpass_swigregister(Allpass)

class Moog(Filter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Moog_swiginit(self, _CSL6.new_Moog(*args))
    __swig_destroy__ = _CSL6.delete_Moog

# Register Moog in _CSL6:
_CSL6.Moog_swigregister(Moog)

class DelayLine(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxDelayInSamples):
        _CSL6.DelayLine_swiginit(self, _CSL6.new_DelayLine(maxDelayInSamples))
    delayTime = _swig_new_instance_method(_CSL6.DelayLine_delayTime)
    delayLength = _swig_new_instance_method(_CSL6.DelayLine_delayLength)
    setDelayTime = _swig_new_instance_method(_CSL6.DelayLine_setDelayTime)
    setDelayLength = _swig_new_instance_method(_CSL6.DelayLine_setDelayLength)
    __swig_destroy__ = _CSL6.delete_DelayLine

# Register DelayLine in _CSL6:
_CSL6.DelayLine_swigregister(DelayLine)

class Mixer(UnitGenerator, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Mixer_swiginit(self, _CSL6.new_Mixer(*args))
    __swig_destroy__ = _CSL6.delete_Mixer
    getInputs = _swig_new_instance_method(_CSL6.Mixer_getInputs)
    getNumInputs = _swig_new_instance_method(_CSL6.Mixer_getNumInputs)
    addInput = _swig_new_instance_method(_CSL6.Mixer_addInput)
    removeInput = _swig_new_instance_method(_CSL6.Mixer_removeInput)
    deleteInputs = _swig_new_instance_method(_CSL6.Mixer_deleteInputs)
    scaleInput = _swig_new_instance_method(_CSL6.Mixer_scaleInput)
    activeSources = _swig_new_instance_method(_CSL6.Mixer_activeSources)

# Register Mixer in _CSL6:
_CSL6.Mixer_swigregister(Mixer)

class Panner(Effect, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Panner_swiginit(self, _CSL6.new_Panner(*args))
    __swig_destroy__ = _CSL6.delete_Panner
    setPosition = _swig_new_instance_method(_CSL6.Panner_setPosition)
    position = _swig_new_instance_method(_CSL6.Panner_position)
    numChannels = _swig_new_instance_method(_CSL6.Panner_numChannels)

# Register Panner in _CSL6:
_CSL6.Panner_swigregister(Panner)

MAX_OUTPUTS = _CSL6.MAX_OUTPUTS
class NtoMPanner(Panner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.NtoMPanner_swiginit(self, _CSL6.new_NtoMPanner(*args))
    __swig_destroy__ = _CSL6.delete_NtoMPanner
    init_stereo = _swig_new_instance_method(_CSL6.NtoMPanner_init_stereo)
    init_quad = _swig_new_instance_method(_CSL6.NtoMPanner_init_quad)
    init_5point1 = _swig_new_instance_method(_CSL6.NtoMPanner_init_5point1)
    init_6ch = _swig_new_instance_method(_CSL6.NtoMPanner_init_6ch)
    setX = _swig_new_instance_method(_CSL6.NtoMPanner_setX)
    setY = _swig_new_instance_method(_CSL6.NtoMPanner_setY)

# Register NtoMPanner in _CSL6:
_CSL6.NtoMPanner_swigregister(NtoMPanner)

class StereoWidth(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.StereoWidth_swiginit(self, _CSL6.new_StereoWidth())
    __swig_destroy__ = _CSL6.delete_StereoWidth
    setWidth = _swig_new_instance_method(_CSL6.StereoWidth_setWidth)
    setPan = _swig_new_instance_method(_CSL6.StereoWidth_setPan)
    setGain = _swig_new_instance_method(_CSL6.StereoWidth_setGain)

# Register StereoWidth in _CSL6:
_CSL6.StereoWidth_swigregister(StereoWidth)

class Convolver(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Convolver_swiginit(self, _CSL6.new_Convolver(*args))
    __swig_destroy__ = _CSL6.delete_Convolver
    setIRFile = _swig_new_instance_method(_CSL6.Convolver_setIRFile)

# Register Convolver in _CSL6:
_CSL6.Convolver_swigregister(Convolver)

class FilterSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, numTaps=0, numBands=0, freqs=None, resps=None, weights=None):
        _CSL6.FilterSpecification_swiginit(self, _CSL6.new_FilterSpecification(numTaps, numBands, freqs, resps, weights))
    __swig_destroy__ = _CSL6.delete_FilterSpecification
    setFrequencies = _swig_new_instance_method(_CSL6.FilterSpecification_setFrequencies)
    setResponses = _swig_new_instance_method(_CSL6.FilterSpecification_setResponses)
    setWeights = _swig_new_instance_method(_CSL6.FilterSpecification_setWeights)
    setNumTaps = _swig_new_instance_method(_CSL6.FilterSpecification_setNumTaps)
    mNumTaps = property(_CSL6.FilterSpecification_mNumTaps_get, _CSL6.FilterSpecification_mNumTaps_set)
    planFilter = _swig_new_instance_method(_CSL6.FilterSpecification_planFilter)
    mTapData = property(_CSL6.FilterSpecification_mTapData_get, _CSL6.FilterSpecification_mTapData_set)
    mNumBands = property(_CSL6.FilterSpecification_mNumBands_get, _CSL6.FilterSpecification_mNumBands_set)
    mFrequencies = property(_CSL6.FilterSpecification_mFrequencies_get, _CSL6.FilterSpecification_mFrequencies_set)
    mResponses = property(_CSL6.FilterSpecification_mResponses_get, _CSL6.FilterSpecification_mResponses_set)
    mWeights = property(_CSL6.FilterSpecification_mWeights_get, _CSL6.FilterSpecification_mWeights_set)

# Register FilterSpecification in _CSL6:
_CSL6.FilterSpecification_swigregister(FilterSpecification)

class FIR(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.FIR_swiginit(self, _CSL6.new_FIR(*args))
    __swig_destroy__ = _CSL6.delete_FIR
    setTaps = _swig_new_instance_method(_CSL6.FIR_setTaps)
    readTaps = _swig_new_instance_method(_CSL6.FIR_readTaps)
    print_taps = _swig_new_instance_method(_CSL6.FIR_print_taps)

# Register FIR in _CSL6:
_CSL6.FIR_swigregister(FIR)

class Freeverb(Effect, Scalable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, input):
        _CSL6.Freeverb_swiginit(self, _CSL6.new_Freeverb(input))
    __swig_destroy__ = _CSL6.delete_Freeverb
    setRoomSize = _swig_new_instance_method(_CSL6.Freeverb_setRoomSize)
    roomSize = _swig_new_instance_method(_CSL6.Freeverb_roomSize)
    dampening = _swig_new_instance_method(_CSL6.Freeverb_dampening)
    setDampening = _swig_new_instance_method(_CSL6.Freeverb_setDampening)
    setWetLevel = _swig_new_instance_method(_CSL6.Freeverb_setWetLevel)
    wetLevel = _swig_new_instance_method(_CSL6.Freeverb_wetLevel)
    setDryLevel = _swig_new_instance_method(_CSL6.Freeverb_setDryLevel)
    dryLevel = _swig_new_instance_method(_CSL6.Freeverb_dryLevel)
    setWidth = _swig_new_instance_method(_CSL6.Freeverb_setWidth)
    width = _swig_new_instance_method(_CSL6.Freeverb_width)

# Register Freeverb in _CSL6:
_CSL6.Freeverb_swigregister(Freeverb)

class Comb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.Comb_swiginit(self, _CSL6.new_Comb())
    mute = _swig_new_instance_method(_CSL6.Comb_mute)
    damp = _swig_new_instance_method(_CSL6.Comb_damp)
    feedback = _swig_new_instance_method(_CSL6.Comb_feedback)
    setDamp = _swig_new_instance_method(_CSL6.Comb_setDamp)
    setFeedback = _swig_new_instance_method(_CSL6.Comb_setFeedback)
    setBuffer = _swig_new_instance_method(_CSL6.Comb_setBuffer)
    process = _swig_new_instance_method(_CSL6.Comb_process)
    __swig_destroy__ = _CSL6.delete_Comb

# Register Comb in _CSL6:
_CSL6.Comb_swigregister(Comb)

class FAllpass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.FAllpass_swiginit(self, _CSL6.new_FAllpass())
    mute = _swig_new_instance_method(_CSL6.FAllpass_mute)
    feedback = _swig_new_instance_method(_CSL6.FAllpass_feedback)
    setFeedback = _swig_new_instance_method(_CSL6.FAllpass_setFeedback)
    setBuffer = _swig_new_instance_method(_CSL6.FAllpass_setBuffer)
    process = _swig_new_instance_method(_CSL6.FAllpass_process)
    __swig_destroy__ = _CSL6.delete_FAllpass

# Register FAllpass in _CSL6:
_CSL6.FAllpass_swigregister(FAllpass)

class Stereoverb(Effect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, input):
        _CSL6.Stereoverb_swiginit(self, _CSL6.new_Stereoverb(input))
    __swig_destroy__ = _CSL6.delete_Stereoverb
    setRoomSize = _swig_new_instance_method(_CSL6.Stereoverb_setRoomSize)
    setDampening = _swig_new_instance_method(_CSL6.Stereoverb_setDampening)
    setWetLevel = _swig_new_instance_method(_CSL6.Stereoverb_setWetLevel)
    setDryLevel = _swig_new_instance_method(_CSL6.Stereoverb_setDryLevel)
    setWidth = _swig_new_instance_method(_CSL6.Stereoverb_setWidth)

# Register Stereoverb in _CSL6:
_CSL6.Stereoverb_swigregister(Stereoverb)

class AudioIODeviceCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_AudioIODeviceCallback
    audioDeviceIOCallback = _swig_new_instance_method(_CSL6.AudioIODeviceCallback_audioDeviceIOCallback)
    audioDeviceAboutToStart = _swig_new_instance_method(_CSL6.AudioIODeviceCallback_audioDeviceAboutToStart)
    audioDeviceStopped = _swig_new_instance_method(_CSL6.AudioIODeviceCallback_audioDeviceStopped)
    audioDeviceError = _swig_new_instance_method(_CSL6.AudioIODeviceCallback_audioDeviceError)

# Register AudioIODeviceCallback in _CSL6:
_CSL6.AudioIODeviceCallback_swigregister(AudioIODeviceCallback)
projectName = cvar.projectName
companyName = cvar.companyName
versionString = cvar.versionString
versionNumber = cvar.versionNumber

class AudioIODevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_AudioIODevice
    getName = _swig_new_instance_method(_CSL6.AudioIODevice_getName)
    getTypeName = _swig_new_instance_method(_CSL6.AudioIODevice_getTypeName)
    getOutputChannelNames = _swig_new_instance_method(_CSL6.AudioIODevice_getOutputChannelNames)
    getInputChannelNames = _swig_new_instance_method(_CSL6.AudioIODevice_getInputChannelNames)
    getAvailableSampleRates = _swig_new_instance_method(_CSL6.AudioIODevice_getAvailableSampleRates)
    getAvailableBufferSizes = _swig_new_instance_method(_CSL6.AudioIODevice_getAvailableBufferSizes)
    getDefaultBufferSize = _swig_new_instance_method(_CSL6.AudioIODevice_getDefaultBufferSize)
    open = _swig_new_instance_method(_CSL6.AudioIODevice_open)
    close = _swig_new_instance_method(_CSL6.AudioIODevice_close)
    isOpen = _swig_new_instance_method(_CSL6.AudioIODevice_isOpen)
    start = _swig_new_instance_method(_CSL6.AudioIODevice_start)
    stop = _swig_new_instance_method(_CSL6.AudioIODevice_stop)
    isPlaying = _swig_new_instance_method(_CSL6.AudioIODevice_isPlaying)
    getLastError = _swig_new_instance_method(_CSL6.AudioIODevice_getLastError)
    getCurrentBufferSizeSamples = _swig_new_instance_method(_CSL6.AudioIODevice_getCurrentBufferSizeSamples)
    getCurrentSampleRate = _swig_new_instance_method(_CSL6.AudioIODevice_getCurrentSampleRate)
    getCurrentBitDepth = _swig_new_instance_method(_CSL6.AudioIODevice_getCurrentBitDepth)
    getActiveOutputChannels = _swig_new_instance_method(_CSL6.AudioIODevice_getActiveOutputChannels)
    getActiveInputChannels = _swig_new_instance_method(_CSL6.AudioIODevice_getActiveInputChannels)
    getOutputLatencyInSamples = _swig_new_instance_method(_CSL6.AudioIODevice_getOutputLatencyInSamples)
    getInputLatencyInSamples = _swig_new_instance_method(_CSL6.AudioIODevice_getInputLatencyInSamples)
    hasControlPanel = _swig_new_instance_method(_CSL6.AudioIODevice_hasControlPanel)
    showControlPanel = _swig_new_instance_method(_CSL6.AudioIODevice_showControlPanel)
    setAudioPreprocessingEnabled = _swig_new_instance_method(_CSL6.AudioIODevice_setAudioPreprocessingEnabled)
    getXRunCount = _swig_new_instance_method(_CSL6.AudioIODevice_getXRunCount)

# Register AudioIODevice in _CSL6:
_CSL6.AudioIODevice_swigregister(AudioIODevice)

class JUCEIO(IO, AudioIODeviceCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s_rate=44100, b_size=1024, in_device=0, out_device=0, in_chans=0, out_chans=2):
        _CSL6.JUCEIO_swiginit(self, _CSL6.new_JUCEIO(s_rate, b_size, in_device, out_device, in_chans, out_chans))
    __swig_destroy__ = _CSL6.delete_JUCEIO

# Register JUCEIO in _CSL6:
_CSL6.JUCEIO_swigregister(JUCEIO)

class FileIO(IO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path=None):
        _CSL6.FileIO_swiginit(self, _CSL6.new_FileIO(path))
    __swig_destroy__ = _CSL6.delete_FileIO
    mIsPlaying = property(_CSL6.FileIO_mIsPlaying_get, _CSL6.FileIO_mIsPlaying_set)
    mIsThreadRunning = property(_CSL6.FileIO_mIsThreadRunning_get, _CSL6.FileIO_mIsThreadRunning_set)
    mDuration = property(_CSL6.FileIO_mDuration_get, _CSL6.FileIO_mDuration_set)
    start = _swig_new_instance_method(_CSL6.FileIO_start)
    getInput = _swig_new_instance_method(_CSL6.FileIO_getInput)

# Register FileIO in _CSL6:
_CSL6.FileIO_swigregister(FileIO)

kSoundFileClosed = _CSL6.kSoundFileClosed
kSoundFileRead = _CSL6.kSoundFileRead
kSoundFileWrite = _CSL6.kSoundFileWrite
kSoundFileReadWrite = _CSL6.kSoundFileReadWrite
kSoundFileFormatAIFF = _CSL6.kSoundFileFormatAIFF
kSoundFileFormatWAV = _CSL6.kSoundFileFormatWAV
kSoundFileFormatMP3 = _CSL6.kSoundFileFormatMP3
kSoundFileFormatMP4 = _CSL6.kSoundFileFormatMP4
kSoundFileFormatAAC = _CSL6.kSoundFileFormatAAC
kSoundFileFormatFLAC = _CSL6.kSoundFileFormatFLAC
kSoundFileFormatCAF = _CSL6.kSoundFileFormatCAF
kSoundFileFormatOGG = _CSL6.kSoundFileFormatOGG
kSoundFileFormatSHN = _CSL6.kSoundFileFormatSHN
kSoundFileFormatSND = _CSL6.kSoundFileFormatSND
kSoundFileFormatEBICSF = _CSL6.kSoundFileFormatEBICSF
kSoundFileFormatRaw = _CSL6.kSoundFileFormatRaw
kSoundFileFormatOther = _CSL6.kSoundFileFormatOther
class SoundFileMetadata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mTitle = property(_CSL6.SoundFileMetadata_mTitle_get, _CSL6.SoundFileMetadata_mTitle_set)
    mArtist = property(_CSL6.SoundFileMetadata_mArtist_get, _CSL6.SoundFileMetadata_mArtist_set)
    mAlbum = property(_CSL6.SoundFileMetadata_mAlbum_get, _CSL6.SoundFileMetadata_mAlbum_set)
    mYear = property(_CSL6.SoundFileMetadata_mYear_get, _CSL6.SoundFileMetadata_mYear_set)
    mComment = property(_CSL6.SoundFileMetadata_mComment_get, _CSL6.SoundFileMetadata_mComment_set)
    mTrack = property(_CSL6.SoundFileMetadata_mTrack_get, _CSL6.SoundFileMetadata_mTrack_set)
    mGenre = property(_CSL6.SoundFileMetadata_mGenre_get, _CSL6.SoundFileMetadata_mGenre_set)
    mBitRate = property(_CSL6.SoundFileMetadata_mBitRate_get, _CSL6.SoundFileMetadata_mBitRate_set)
    mSampleRate = property(_CSL6.SoundFileMetadata_mSampleRate_get, _CSL6.SoundFileMetadata_mSampleRate_set)
    mChannels = property(_CSL6.SoundFileMetadata_mChannels_get, _CSL6.SoundFileMetadata_mChannels_set)
    mLength = property(_CSL6.SoundFileMetadata_mLength_get, _CSL6.SoundFileMetadata_mLength_set)

    def __init__(self):
        _CSL6.SoundFileMetadata_swiginit(self, _CSL6.new_SoundFileMetadata())
    __swig_destroy__ = _CSL6.delete_SoundFileMetadata
    dump = _swig_new_instance_method(_CSL6.SoundFileMetadata_dump)

# Register SoundFileMetadata in _CSL6:
_CSL6.SoundFileMetadata_swigregister(SoundFileMetadata)

class Abst_SoundFile(WavetableOscillator, Writeable, Seekable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_Abst_SoundFile
    isSndfileName = _swig_new_static_method(_CSL6.Abst_SoundFile_isSndfileName)
    sndfileNameType = _swig_new_static_method(_CSL6.Abst_SoundFile_sndfileNameType)
    mimeType = _swig_new_static_method(_CSL6.Abst_SoundFile_mimeType)
    openForRead = _swig_new_instance_method(_CSL6.Abst_SoundFile_openForRead)
    openForWrite = _swig_new_instance_method(_CSL6.Abst_SoundFile_openForWrite)
    seekTo = _swig_new_instance_method(_CSL6.Abst_SoundFile_seekTo)
    readBufferFromFile = _swig_new_instance_method(_CSL6.Abst_SoundFile_readBufferFromFile)
    writeBuffer = _swig_new_instance_method(_CSL6.Abst_SoundFile_writeBuffer)
    buffer = _swig_new_instance_method(_CSL6.Abst_SoundFile_buffer)
    channels = _swig_new_instance_method(_CSL6.Abst_SoundFile_channels)
    durationInSecs = _swig_new_instance_method(_CSL6.Abst_SoundFile_durationInSecs)
    sampleSize = _swig_new_instance_method(_CSL6.Abst_SoundFile_sampleSize)
    mode = _swig_new_instance_method(_CSL6.Abst_SoundFile_mode)
    cacheSize = _swig_new_instance_method(_CSL6.Abst_SoundFile_cacheSize)
    mergeToMono = _swig_new_instance_method(_CSL6.Abst_SoundFile_mergeToMono)
    setToEnd = _swig_new_instance_method(_CSL6.Abst_SoundFile_setToEnd)
    close = _swig_new_instance_method(_CSL6.Abst_SoundFile_close)
    freeBuffer = _swig_new_instance_method(_CSL6.Abst_SoundFile_freeBuffer)
    convertRate = _swig_new_instance_method(_CSL6.Abst_SoundFile_convertRate)
    isValid = _swig_new_instance_method(_CSL6.Abst_SoundFile_isValid)
    isCached = _swig_new_instance_method(_CSL6.Abst_SoundFile_isCached)
    setPath = _swig_new_instance_method(_CSL6.Abst_SoundFile_setPath)
    path = _swig_new_instance_method(_CSL6.Abst_SoundFile_path)
    startFrame = _swig_new_instance_method(_CSL6.Abst_SoundFile_startFrame)
    setStart = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStart)
    setStartSec = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStartSec)
    setStartRatio = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStartRatio)
    stopFrame = _swig_new_instance_method(_CSL6.Abst_SoundFile_stopFrame)
    setStop = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStop)
    setStopSec = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStopSec)
    setStopRatio = _swig_new_instance_method(_CSL6.Abst_SoundFile_setStopRatio)
    setBase = _swig_new_instance_method(_CSL6.Abst_SoundFile_setBase)
    base = _swig_new_instance_method(_CSL6.Abst_SoundFile_base)
    playbackRate = _swig_new_instance_method(_CSL6.Abst_SoundFile_playbackRate)
    setRate = _swig_new_instance_method(_CSL6.Abst_SoundFile_setRate)
    isLooping = _swig_new_instance_method(_CSL6.Abst_SoundFile_isLooping)
    setIsLooping = _swig_new_instance_method(_CSL6.Abst_SoundFile_setIsLooping)
    mProperties = property(_CSL6.Abst_SoundFile_mProperties_get, _CSL6.Abst_SoundFile_mProperties_set)

# Register Abst_SoundFile in _CSL6:
_CSL6.Abst_SoundFile_swigregister(Abst_SoundFile)
Abst_SoundFile_isSndfileName = _CSL6.Abst_SoundFile_isSndfileName
Abst_SoundFile_sndfileNameType = _CSL6.Abst_SoundFile_sndfileNameType
Abst_SoundFile_mimeType = _CSL6.Abst_SoundFile_mimeType

class SoundCue(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.SoundCue_swiginit(self, _CSL6.new_SoundCue(*args))
    __swig_destroy__ = _CSL6.delete_SoundCue
    mName = property(_CSL6.SoundCue_mName_get, _CSL6.SoundCue_mName_set)
    mFile = property(_CSL6.SoundCue_mFile_get, _CSL6.SoundCue_mFile_set)
    mStart = property(_CSL6.SoundCue_mStart_get, _CSL6.SoundCue_mStart_set)
    mStop = property(_CSL6.SoundCue_mStop_get, _CSL6.SoundCue_mStop_set)
    mCurrent = property(_CSL6.SoundCue_mCurrent_get, _CSL6.SoundCue_mCurrent_set)
    mReadRate = property(_CSL6.SoundCue_mReadRate_get, _CSL6.SoundCue_mReadRate_set)
    readFrom = _swig_new_instance_method(_CSL6.SoundCue_readFrom)
    channels = _swig_new_instance_method(_CSL6.SoundCue_channels)
    setToEnd = _swig_new_instance_method(_CSL6.SoundCue_setToEnd)
    duration = _swig_new_instance_method(_CSL6.SoundCue_duration)

# Register SoundCue in _CSL6:
_CSL6.SoundCue_swigregister(SoundCue)

class SoundFileBuffer(Buffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.SoundFileBuffer_swiginit(self, _CSL6.new_SoundFileBuffer(*args))
    __swig_destroy__ = _CSL6.delete_SoundFileBuffer
    samplePtrFor = _swig_new_instance_method(_CSL6.SoundFileBuffer_samplePtrFor)
    setBuffer = _swig_new_instance_method(_CSL6.SoundFileBuffer_setBuffer)

# Register SoundFileBuffer in _CSL6:
_CSL6.SoundFileBuffer_swigregister(SoundFileBuffer)

class ReferenceCountedObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    incReferenceCount = _swig_new_instance_method(_CSL6.ReferenceCountedObject_incReferenceCount)
    decReferenceCount = _swig_new_instance_method(_CSL6.ReferenceCountedObject_decReferenceCount)
    decReferenceCountWithoutDeleting = _swig_new_instance_method(_CSL6.ReferenceCountedObject_decReferenceCountWithoutDeleting)
    getReferenceCount = _swig_new_instance_method(_CSL6.ReferenceCountedObject_getReferenceCount)

# Register ReferenceCountedObject in _CSL6:
_CSL6.ReferenceCountedObject_swigregister(ReferenceCountedObject)

class SingleThreadedReferenceCountedObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    incReferenceCount = _swig_new_instance_method(_CSL6.SingleThreadedReferenceCountedObject_incReferenceCount)
    decReferenceCount = _swig_new_instance_method(_CSL6.SingleThreadedReferenceCountedObject_decReferenceCount)
    decReferenceCountWithoutDeleting = _swig_new_instance_method(_CSL6.SingleThreadedReferenceCountedObject_decReferenceCountWithoutDeleting)
    getReferenceCount = _swig_new_instance_method(_CSL6.SingleThreadedReferenceCountedObject_getReferenceCount)

# Register SingleThreadedReferenceCountedObject in _CSL6:
_CSL6.SingleThreadedReferenceCountedObject_swigregister(SingleThreadedReferenceCountedObject)

kNone = _CSL6.kNone
kNoteOff = _CSL6.kNoteOff
kNoteOn = _CSL6.kNoteOn
kPolyTouch = _CSL6.kPolyTouch
kControlChange = _CSL6.kControlChange
kProgramChange = _CSL6.kProgramChange
kAftertouch = _CSL6.kAftertouch
kPitchWheel = _CSL6.kPitchWheel
kSysEX = _CSL6.kSysEX
class CMIDIMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.CMIDIMessage_swiginit(self, _CSL6.new_CMIDIMessage(*args))
    isNoteOn = _swig_new_instance_method(_CSL6.CMIDIMessage_isNoteOn)
    isNoteOff = _swig_new_instance_method(_CSL6.CMIDIMessage_isNoteOff)
    isNoteOnOff = _swig_new_instance_method(_CSL6.CMIDIMessage_isNoteOnOff)
    isPolyTouch = _swig_new_instance_method(_CSL6.CMIDIMessage_isPolyTouch)
    isControlChange = _swig_new_instance_method(_CSL6.CMIDIMessage_isControlChange)
    isProgramChange = _swig_new_instance_method(_CSL6.CMIDIMessage_isProgramChange)
    isAftertouch = _swig_new_instance_method(_CSL6.CMIDIMessage_isAftertouch)
    isPitchWheel = _swig_new_instance_method(_CSL6.CMIDIMessage_isPitchWheel)
    isSysEX = _swig_new_instance_method(_CSL6.CMIDIMessage_isSysEX)
    getCommand = _swig_new_instance_method(_CSL6.CMIDIMessage_getCommand)
    getNote = _swig_new_instance_method(_CSL6.CMIDIMessage_getNote)
    getVelocity = _swig_new_instance_method(_CSL6.CMIDIMessage_getVelocity)
    getPolyAftertouch = _swig_new_instance_method(_CSL6.CMIDIMessage_getPolyAftertouch)
    getControlFunction = _swig_new_instance_method(_CSL6.CMIDIMessage_getControlFunction)
    getControlValue = _swig_new_instance_method(_CSL6.CMIDIMessage_getControlValue)
    getProgramNumber = _swig_new_instance_method(_CSL6.CMIDIMessage_getProgramNumber)
    getAftertouch = _swig_new_instance_method(_CSL6.CMIDIMessage_getAftertouch)
    getPitchWheel = _swig_new_instance_method(_CSL6.CMIDIMessage_getPitchWheel)
    getFrequency = _swig_new_instance_method(_CSL6.CMIDIMessage_getFrequency)
    getVelocityFloat = _swig_new_instance_method(_CSL6.CMIDIMessage_getVelocityFloat)
    message = property(_CSL6.CMIDIMessage_message_get, _CSL6.CMIDIMessage_message_set)
    command = property(_CSL6.CMIDIMessage_command_get, _CSL6.CMIDIMessage_command_set)
    channel = property(_CSL6.CMIDIMessage_channel_get, _CSL6.CMIDIMessage_channel_set)
    data1 = property(_CSL6.CMIDIMessage_data1_get, _CSL6.CMIDIMessage_data1_set)
    data2 = property(_CSL6.CMIDIMessage_data2_get, _CSL6.CMIDIMessage_data2_set)
    time = property(_CSL6.CMIDIMessage_time_get, _CSL6.CMIDIMessage_time_set)
    __swig_destroy__ = _CSL6.delete_CMIDIMessage

# Register CMIDIMessage in _CSL6:
_CSL6.CMIDIMessage_swigregister(CMIDIMessage)

class MidiDeviceListEntry(ReferenceCountedObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, info):
        _CSL6.MidiDeviceListEntry_swiginit(self, _CSL6.new_MidiDeviceListEntry(info))
    deviceInfo = property(_CSL6.MidiDeviceListEntry_deviceInfo_get, _CSL6.MidiDeviceListEntry_deviceInfo_set)
    inDevice = property(_CSL6.MidiDeviceListEntry_inDevice_get, _CSL6.MidiDeviceListEntry_inDevice_set)
    outDevice = property(_CSL6.MidiDeviceListEntry_outDevice_get, _CSL6.MidiDeviceListEntry_outDevice_set)
    __swig_destroy__ = _CSL6.delete_MidiDeviceListEntry

# Register MidiDeviceListEntry in _CSL6:
_CSL6.MidiDeviceListEntry_swigregister(MidiDeviceListEntry)

class MIDIIO(Model):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSL6.delete_MIDIIO
    countDevices = _swig_new_instance_method(_CSL6.MIDIIO_countDevices)
    dumpDevices = _swig_new_instance_method(_CSL6.MIDIIO_dumpDevices)
    open = _swig_new_instance_method(_CSL6.MIDIIO_open)
    isOpen = _swig_new_instance_method(_CSL6.MIDIIO_isOpen)
    close = _swig_new_instance_method(_CSL6.MIDIIO_close)
    start = _swig_new_instance_method(_CSL6.MIDIIO_start)
    stop = _swig_new_instance_method(_CSL6.MIDIIO_stop)
    clear = _swig_new_instance_method(_CSL6.MIDIIO_clear)
    dumpBuffer = _swig_new_instance_method(_CSL6.MIDIIO_dumpBuffer)
    mDeviceID = property(_CSL6.MIDIIO_mDeviceID_get, _CSL6.MIDIIO_mDeviceID_set)
    mMsg = property(_CSL6.MIDIIO_mMsg_get, _CSL6.MIDIIO_mMsg_set)
    mMsg2 = property(_CSL6.MIDIIO_mMsg2_get, _CSL6.MIDIIO_mMsg2_set)
    mBuffer = property(_CSL6.MIDIIO_mBuffer_get, _CSL6.MIDIIO_mBuffer_set)

# Register MIDIIO in _CSL6:
_CSL6.MIDIIO_swigregister(MIDIIO)

class MIDIIn(MIDIIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.MIDIIn_swiginit(self, _CSL6.new_MIDIIn())
    bufferSize = _swig_new_instance_method(_CSL6.MIDIIn_bufferSize)
    setBufferSize = _swig_new_instance_method(_CSL6.MIDIIn_setBufferSize)
    poll = _swig_new_instance_method(_CSL6.MIDIIn_poll)
    nextEvent = _swig_new_instance_method(_CSL6.MIDIIn_nextEvent)
    dumpMessage = _swig_new_instance_method(_CSL6.MIDIIn_dumpMessage)
    mDevice = property(_CSL6.MIDIIn_mDevice_get, _CSL6.MIDIIn_mDevice_set)
    mStartTime = property(_CSL6.MIDIIn_mStartTime_get, _CSL6.MIDIIn_mStartTime_set)
    handleIncomingMidiMessage = _swig_new_instance_method(_CSL6.MIDIIn_handleIncomingMidiMessage)
    handleNoteOn = _swig_new_instance_method(_CSL6.MIDIIn_handleNoteOn)
    handleNoteOff = _swig_new_instance_method(_CSL6.MIDIIn_handleNoteOff)
    handleAsyncUpdate = _swig_new_instance_method(_CSL6.MIDIIn_handleAsyncUpdate)
    midiMonitorLock = property(_CSL6.MIDIIn_midiMonitorLock_get, _CSL6.MIDIIn_midiMonitorLock_set)
    incomingMessages = property(_CSL6.MIDIIn_incomingMessages_get, _CSL6.MIDIIn_incomingMessages_set)
    mKeyboardState = property(_CSL6.MIDIIn_mKeyboardState_get, _CSL6.MIDIIn_mKeyboardState_set)
    __swig_destroy__ = _CSL6.delete_MIDIIn

# Register MIDIIn in _CSL6:
_CSL6.MIDIIn_swigregister(MIDIIn)

class MIDIOut(MIDIIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.MIDIOut_swiginit(self, _CSL6.new_MIDIOut())
    __swig_destroy__ = _CSL6.delete_MIDIOut
    mOut = property(_CSL6.MIDIOut_mOut_get, _CSL6.MIDIOut_mOut_set)
    write = _swig_new_instance_method(_CSL6.MIDIOut_write)
    writeNoteOn = _swig_new_instance_method(_CSL6.MIDIOut_writeNoteOn)
    writeNoteOff = _swig_new_instance_method(_CSL6.MIDIOut_writeNoteOff)
    writePolyTouch = _swig_new_instance_method(_CSL6.MIDIOut_writePolyTouch)
    writeControlChange = _swig_new_instance_method(_CSL6.MIDIOut_writeControlChange)
    writeProgramChange = _swig_new_instance_method(_CSL6.MIDIOut_writeProgramChange)
    writeAftertouch = _swig_new_instance_method(_CSL6.MIDIOut_writeAftertouch)
    writePitchWheel = _swig_new_instance_method(_CSL6.MIDIOut_writePitchWheel)
    writeSysEX = _swig_new_instance_method(_CSL6.MIDIOut_writeSysEX)

# Register MIDIOut in _CSL6:
_CSL6.MIDIOut_swigregister(MIDIOut)

class MIDIPlayer(MIDIIO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.MIDIPlayer_swiginit(self, _CSL6.new_MIDIPlayer(*args))
    __swig_destroy__ = _CSL6.delete_MIDIPlayer
    start = _swig_new_instance_method(_CSL6.MIDIPlayer_start)
    mFile = property(_CSL6.MIDIPlayer_mFile_get, _CSL6.MIDIPlayer_mFile_set)
    mNumTrax = property(_CSL6.MIDIPlayer_mNumTrax_get, _CSL6.MIDIPlayer_mNumTrax_set)
    mTrak = property(_CSL6.MIDIPlayer_mTrak_get, _CSL6.MIDIPlayer_mTrak_set)
    mIsOn = property(_CSL6.MIDIPlayer_mIsOn_get, _CSL6.MIDIPlayer_mIsOn_set)
    mLibrary = property(_CSL6.MIDIPlayer_mLibrary_get, _CSL6.MIDIPlayer_mLibrary_set)
    mTempoScale = property(_CSL6.MIDIPlayer_mTempoScale_get, _CSL6.MIDIPlayer_mTempoScale_set)

# Register MIDIPlayer in _CSL6:
_CSL6.MIDIPlayer_swigregister(MIDIPlayer)

find_option = _CSL6.find_option
usage = _CSL6.usage
initOSC = _CSL6.initOSC
setupOSCInstrLibrary = _CSL6.setupOSCInstrLibrary
mainOSCLoop = _CSL6.mainOSCLoop
CSL_INT_TYPE = _CSL6.CSL_INT_TYPE
CSL_FLOAT_TYPE = _CSL6.CSL_FLOAT_TYPE
CSL_STRING_TYPE = _CSL6.CSL_STRING_TYPE
class Accessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, na, sel, typ):
        _CSL6.Accessor_swiginit(self, _CSL6.new_Accessor(na, sel, typ))
    mName = property(_CSL6.Accessor_mName_get, _CSL6.Accessor_mName_set)
    mSelector = property(_CSL6.Accessor_mSelector_get, _CSL6.Accessor_mSelector_set)
    mType = property(_CSL6.Accessor_mType_get, _CSL6.Accessor_mType_set)
    __swig_destroy__ = _CSL6.delete_Accessor

# Register Accessor in _CSL6:
_CSL6.Accessor_swigregister(Accessor)

set_duration_f = _CSL6.set_duration_f
set_amplitude_f = _CSL6.set_amplitude_f
set_frequency_f = _CSL6.set_frequency_f
set_position_f = _CSL6.set_position_f
set_position_p = _CSL6.set_position_p
set_attack_f = _CSL6.set_attack_f
set_decay_f = _CSL6.set_decay_f
set_sustain_f = _CSL6.set_sustain_f
set_release_f = _CSL6.set_release_f
set_iattack_f = _CSL6.set_iattack_f
set_idecay_f = _CSL6.set_idecay_f
set_isustain_f = _CSL6.set_isustain_f
set_irelease_f = _CSL6.set_irelease_f
set_index_f = _CSL6.set_index_f
set_c_freq_f = _CSL6.set_c_freq_f
set_m_freq_f = _CSL6.set_m_freq_f
set_cm_freq_r = _CSL6.set_cm_freq_r
set_gliss_r = _CSL6.set_gliss_r
set_vib_depth_f = _CSL6.set_vib_depth_f
set_chiff_amt_f = _CSL6.set_chiff_amt_f
set_chiff_time_f = _CSL6.set_chiff_time_f
set_rate_f = _CSL6.set_rate_f
set_file_f = _CSL6.set_file_f
set_start_f = _CSL6.set_start_f
set_stop_f = _CSL6.set_stop_f
set_partial_f = _CSL6.set_partial_f
set_partials_f = _CSL6.set_partials_f
wet_dry_f = _CSL6.wet_dry_f
class Instrument(UnitGenerator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.Instrument_swiginit(self, _CSL6.new_Instrument(*args))
    __swig_destroy__ = _CSL6.delete_Instrument
    graph = _swig_new_instance_method(_CSL6.Instrument_graph)
    genMap = _swig_new_instance_method(_CSL6.Instrument_genMap)
    envelopes = _swig_new_instance_method(_CSL6.Instrument_envelopes)
    name = _swig_new_instance_method(_CSL6.Instrument_name)
    genNamed = _swig_new_instance_method(_CSL6.Instrument_genNamed)
    getAccessors = _swig_new_instance_method(_CSL6.Instrument_getAccessors)
    numAccessors = _swig_new_instance_method(_CSL6.Instrument_numAccessors)
    setParameter = _swig_new_instance_method(_CSL6.Instrument_setParameter)
    play = _swig_new_instance_method(_CSL6.Instrument_play)
    playOSC = _swig_new_instance_method(_CSL6.Instrument_playOSC)
    playNote = _swig_new_instance_method(_CSL6.Instrument_playNote)
    playMIDI = _swig_new_instance_method(_CSL6.Instrument_playMIDI)
    release = _swig_new_instance_method(_CSL6.Instrument_release)

# Register Instrument in _CSL6:
_CSL6.Instrument_swigregister(Instrument)

class AdditiveInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.AdditiveInstrument_swiginit(self, _CSL6.new_AdditiveInstrument(*args))
    __swig_destroy__ = _CSL6.delete_AdditiveInstrument
    playNote = _swig_new_instance_method(_CSL6.AdditiveInstrument_playNote)
    mAEnv = property(_CSL6.AdditiveInstrument_mAEnv_get, _CSL6.AdditiveInstrument_mAEnv_set)
    mSOS = property(_CSL6.AdditiveInstrument_mSOS_get, _CSL6.AdditiveInstrument_mSOS_set)
    mPanner = property(_CSL6.AdditiveInstrument_mPanner_get, _CSL6.AdditiveInstrument_mPanner_set)

# Register AdditiveInstrument in _CSL6:
_CSL6.AdditiveInstrument_swigregister(AdditiveInstrument)

class VAdditiveInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, spect1, spect2):
        _CSL6.VAdditiveInstrument_swiginit(self, _CSL6.new_VAdditiveInstrument(spect1, spect2))
    __swig_destroy__ = _CSL6.delete_VAdditiveInstrument
    playNote = _swig_new_instance_method(_CSL6.VAdditiveInstrument_playNote)
    mAEnv1 = property(_CSL6.VAdditiveInstrument_mAEnv1_get, _CSL6.VAdditiveInstrument_mAEnv1_set)
    mAEnv2 = property(_CSL6.VAdditiveInstrument_mAEnv2_get, _CSL6.VAdditiveInstrument_mAEnv2_set)
    mXEnv1 = property(_CSL6.VAdditiveInstrument_mXEnv1_get, _CSL6.VAdditiveInstrument_mXEnv1_set)
    mXEnv2 = property(_CSL6.VAdditiveInstrument_mXEnv2_get, _CSL6.VAdditiveInstrument_mXEnv2_set)
    mSOS1 = property(_CSL6.VAdditiveInstrument_mSOS1_get, _CSL6.VAdditiveInstrument_mSOS1_set)
    mSOS2 = property(_CSL6.VAdditiveInstrument_mSOS2_get, _CSL6.VAdditiveInstrument_mSOS2_set)
    mMix = property(_CSL6.VAdditiveInstrument_mMix_get, _CSL6.VAdditiveInstrument_mMix_set)
    mPanner = property(_CSL6.VAdditiveInstrument_mPanner_get, _CSL6.VAdditiveInstrument_mPanner_set)

# Register VAdditiveInstrument in _CSL6:
_CSL6.VAdditiveInstrument_swigregister(VAdditiveInstrument)

class FMInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.FMInstrument_swiginit(self, _CSL6.new_FMInstrument(*args))
    __swig_destroy__ = _CSL6.delete_FMInstrument
    parseArgs = _swig_new_instance_method(_CSL6.FMInstrument_parseArgs)
    playNote = _swig_new_instance_method(_CSL6.FMInstrument_playNote)
    mAEnv = property(_CSL6.FMInstrument_mAEnv_get, _CSL6.FMInstrument_mAEnv_set)
    mIEnv = property(_CSL6.FMInstrument_mIEnv_get, _CSL6.FMInstrument_mIEnv_set)
    mCar = property(_CSL6.FMInstrument_mCar_get, _CSL6.FMInstrument_mCar_set)
    mMod = property(_CSL6.FMInstrument_mMod_get, _CSL6.FMInstrument_mMod_set)
    mPanner = property(_CSL6.FMInstrument_mPanner_get, _CSL6.FMInstrument_mPanner_set)

# Register FMInstrument in _CSL6:
_CSL6.FMInstrument_swigregister(FMInstrument)

class FancyFMInstrument(FMInstrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CSL6.FancyFMInstrument_swiginit(self, _CSL6.new_FancyFMInstrument())
    __swig_destroy__ = _CSL6.delete_FancyFMInstrument
    mVibEnv = property(_CSL6.FancyFMInstrument_mVibEnv_get, _CSL6.FancyFMInstrument_mVibEnv_set)
    mChiffEnv = property(_CSL6.FancyFMInstrument_mChiffEnv_get, _CSL6.FancyFMInstrument_mChiffEnv_set)
    mVibrato = property(_CSL6.FancyFMInstrument_mVibrato_get, _CSL6.FancyFMInstrument_mVibrato_set)
    mChiff = property(_CSL6.FancyFMInstrument_mChiff_get, _CSL6.FancyFMInstrument_mChiff_set)
    mChFilter = property(_CSL6.FancyFMInstrument_mChFilter_get, _CSL6.FancyFMInstrument_mChFilter_set)
    mReverb = property(_CSL6.FancyFMInstrument_mReverb_get, _CSL6.FancyFMInstrument_mReverb_set)

# Register FancyFMInstrument in _CSL6:
_CSL6.FancyFMInstrument_swigregister(FancyFMInstrument)

class FMBell(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.FMBell_swiginit(self, _CSL6.new_FMBell(*args))
    __swig_destroy__ = _CSL6.delete_FMBell
    parseArgs = _swig_new_instance_method(_CSL6.FMBell_parseArgs)
    playNote = _swig_new_instance_method(_CSL6.FMBell_playNote)
    mAEnv = property(_CSL6.FMBell_mAEnv_get, _CSL6.FMBell_mAEnv_set)
    mIEnv = property(_CSL6.FMBell_mIEnv_get, _CSL6.FMBell_mIEnv_set)
    mGliss = property(_CSL6.FMBell_mGliss_get, _CSL6.FMBell_mGliss_set)
    mMod = property(_CSL6.FMBell_mMod_get, _CSL6.FMBell_mMod_set)
    mCar = property(_CSL6.FMBell_mCar_get, _CSL6.FMBell_mCar_set)
    mPanner = property(_CSL6.FMBell_mPanner_get, _CSL6.FMBell_mPanner_set)
    mDirect = property(_CSL6.FMBell_mDirect_get, _CSL6.FMBell_mDirect_set)

# Register FMBell in _CSL6:
_CSL6.FMBell_swigregister(FMBell)

class SndFileInstrument0(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSL6.SndFileInstrument0_swiginit(self, _CSL6.new_SndFileInstrument0(*args))
    __swig_destroy__ = _CSL6.delete_SndFileInstrument0
    playNote = _swig_new_instance_method(_CSL6.SndFileInstrument0_playNote)
    playMIDI = _swig_new_instance_method(_CSL6.SndFileInstrument0_playMIDI)
    mPlayer = property(_CSL6.SndFileInstrument0_mPlayer_get, _CSL6.SndFileInstrument0_mPlayer_set)
    mPanner = property(_CSL6.SndFileInstrument0_mPanner_get, _CSL6.SndFileInstrument0_mPanner_set)

# Register SndFileInstrument0 in _CSL6:
_CSL6.SndFileInstrument0_swigregister(SndFileInstrument0)

class StringInstrument(Instrument):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ampl=0.25, c_fr=220.0, pos=0.0):
        _CSL6.StringInstrument_swiginit(self, _CSL6.new_StringInstrument(ampl, c_fr, pos))
    __swig_destroy__ = _CSL6.delete_StringInstrument
    playNote = _swig_new_instance_method(_CSL6.StringInstrument_playNote)
    mString = property(_CSL6.StringInstrument_mString_get, _CSL6.StringInstrument_mString_set)
    mPanner = property(_CSL6.StringInstrument_mPanner_get, _CSL6.StringInstrument_mPanner_set)

# Register StringInstrument in _CSL6:
_CSL6.StringInstrument_swigregister(StringInstrument)



